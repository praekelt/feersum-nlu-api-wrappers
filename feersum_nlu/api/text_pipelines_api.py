# coding: utf-8

"""
    FeersumNLU API

    This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.  # noqa: E501

    OpenAPI spec version: 2.0.52
    Contact: nlu@feersum.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from feersum_nlu.api_client import ApiClient


class TextPipelinesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def text_pipeline_add_models(self, instance_name, pipeline_model_list, **kwargs):  # noqa: E501
        """Add list of models.  # noqa: E501

        Add models to named text pipeline. Returns the samples added to the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_add_models(instance_name, pipeline_model_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param list[PipelineModel] pipeline_model_list: List of models to add. (required)
        :param str x_caller:
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_add_models_with_http_info(instance_name, pipeline_model_list, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_add_models_with_http_info(instance_name, pipeline_model_list, **kwargs)  # noqa: E501
            return data

    def text_pipeline_add_models_with_http_info(self, instance_name, pipeline_model_list, **kwargs):  # noqa: E501
        """Add list of models.  # noqa: E501

        Add models to named text pipeline. Returns the samples added to the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_add_models_with_http_info(instance_name, pipeline_model_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param list[PipelineModel] pipeline_model_list: List of models to add. (required)
        :param str x_caller:
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'pipeline_model_list', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_add_models" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_add_models`")  # noqa: E501
        # verify the required parameter 'pipeline_model_list' is set
        if ('pipeline_model_list' not in params or
                params['pipeline_model_list'] is None):
            raise ValueError("Missing the required parameter `pipeline_model_list` when calling `text_pipeline_add_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_model_list' in params:
            body_params = params['pipeline_model_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/models', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_create(self, create_details, **kwargs):  # noqa: E501
        """Create a text pipeline.  # noqa: E501

        Create a new text pipeline or reload one from the trash. Returns the details of the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_create(create_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TextPipelineCreateDetails create_details: The details of the instance to create. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_create_with_http_info(create_details, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_create_with_http_info(create_details, **kwargs)  # noqa: E501
            return data

    def text_pipeline_create_with_http_info(self, create_details, **kwargs):  # noqa: E501
        """Create a text pipeline.  # noqa: E501

        Create a new text pipeline or reload one from the trash. Returns the details of the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_create_with_http_info(create_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TextPipelineCreateDetails create_details: The details of the instance to create. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_details', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_details' is set
        if ('create_details' not in params or
                params['create_details'] is None):
            raise ValueError("Missing the required parameter `create_details` when calling `text_pipeline_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_details' in params:
            body_params = params['create_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TextPipelineInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_create_from_path(self, instance_name, create_details, **kwargs):  # noqa: E501
        """Create a text pipeline.  # noqa: E501

        Create a new text pipeline or reload one from the trash. Returns the details of the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_create_from_path(instance_name, create_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param TextPipelineCreateDetails create_details: The details of the instance to create. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_create_from_path_with_http_info(instance_name, create_details, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_create_from_path_with_http_info(instance_name, create_details, **kwargs)  # noqa: E501
            return data

    def text_pipeline_create_from_path_with_http_info(self, instance_name, create_details, **kwargs):  # noqa: E501
        """Create a text pipeline.  # noqa: E501

        Create a new text pipeline or reload one from the trash. Returns the details of the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_create_from_path_with_http_info(instance_name, create_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param TextPipelineCreateDetails create_details: The details of the instance to create. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'create_details', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_create_from_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_create_from_path`")  # noqa: E501
        # verify the required parameter 'create_details' is set
        if ('create_details' not in params or
                params['create_details'] is None):
            raise ValueError("Missing the required parameter `create_details` when calling `text_pipeline_create_from_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_details' in params:
            body_params = params['create_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TextPipelineInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_del(self, instance_name, **kwargs):  # noqa: E501
        """Delete named instance.  # noqa: E501

        Delete and return the details of the named text pipeline instance. Deleted models can be reloaded from the trash with the create operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_del(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_del_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_del_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def text_pipeline_del_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Delete named instance.  # noqa: E501

        Delete and return the details of the named text pipeline instance. Deleted models can be reloaded from the trash with the create operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_del_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_del" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_del`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TextPipelineInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_del_models(self, instance_name, pipeline_model_list, **kwargs):  # noqa: E501
        """Delete list of models.  # noqa: E501

        Delete the listed models of the named text pipeline. Returns the deleted names.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_del_models(instance_name, pipeline_model_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param list[PipelineModel] pipeline_model_list: List of pipeline models. (required)
        :param str x_caller:
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_del_models_with_http_info(instance_name, pipeline_model_list, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_del_models_with_http_info(instance_name, pipeline_model_list, **kwargs)  # noqa: E501
            return data

    def text_pipeline_del_models_with_http_info(self, instance_name, pipeline_model_list, **kwargs):  # noqa: E501
        """Delete list of models.  # noqa: E501

        Delete the listed models of the named text pipeline. Returns the deleted names.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_del_models_with_http_info(instance_name, pipeline_model_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param list[PipelineModel] pipeline_model_list: List of pipeline models. (required)
        :param str x_caller:
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'pipeline_model_list', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_del_models" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_del_models`")  # noqa: E501
        # verify the required parameter 'pipeline_model_list' is set
        if ('pipeline_model_list' not in params or
                params['pipeline_model_list'] is None):
            raise ValueError("Missing the required parameter `pipeline_model_list` when calling `text_pipeline_del_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_model_list' in params:
            body_params = params['pipeline_model_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/models', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_del_models_all(self, instance_name, **kwargs):  # noqa: E501
        """Delete all models from the pipeline.  # noqa: E501

        Delete all models from the named pipeline. Returns the deleted models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_del_models_all(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_del_models_all_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_del_models_all_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def text_pipeline_del_models_all_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Delete all models from the pipeline.  # noqa: E501

        Delete all models from the named pipeline. Returns the deleted models.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_del_models_all_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_del_models_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_del_models_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/models_all', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_get_details(self, instance_name, **kwargs):  # noqa: E501
        """Get details of named instance.  # noqa: E501

        Get the details of the named text pipeline instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_get_details(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_get_details_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_get_details_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def text_pipeline_get_details_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Get details of named instance.  # noqa: E501

        Get the details of the named text pipeline instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_get_details_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_get_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_get_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TextPipelineInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_get_details_all(self, **kwargs):  # noqa: E501
        """Get list of text pipelines.  # noqa: E501

        Get the list of text pipelines.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_get_details_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_caller:
        :return: list[TextPipelineInstanceDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_get_details_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_get_details_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def text_pipeline_get_details_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of text pipelines.  # noqa: E501

        Get the list of text pipelines.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_get_details_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_caller:
        :return: list[TextPipelineInstanceDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_get_details_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TextPipelineInstanceDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_get_models(self, instance_name, **kwargs):  # noqa: E501
        """Get list of models.  # noqa: E501

        Get the models of the named text pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_get_models(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :param int index: The sample index to start from.
        :param int len: The number of samples to return.
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_get_models_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_get_models_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def text_pipeline_get_models_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Get list of models.  # noqa: E501

        Get the models of the named text pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_get_models_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :param int index: The sample index to start from.
        :param int len: The number of samples to return.
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller', 'index', 'len']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_get_models" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_get_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []
        if 'index' in params:
            query_params.append(('index', params['index']))  # noqa: E501
        if 'len' in params:
            query_params.append(('len', params['len']))  # noqa: E501

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_get_params(self, instance_name, **kwargs):  # noqa: E501
        """Get the editable model parameters of named text pipeline.  # noqa: E501

        Get the editable model parameters of named text pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_get_params(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: PipelineParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_get_params_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_get_params_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def text_pipeline_get_params_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Get the editable model parameters of named text pipeline.  # noqa: E501

        Get the editable model parameters of named text pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_get_params_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: PipelineParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_get_params" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_get_params`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/params', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PipelineParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_retrieve(self, instance_name, text_input, **kwargs):  # noqa: E501
        """Run the text pipeline and return the results.  # noqa: E501

        Run the text pipeline and return the results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_retrieve(instance_name, text_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param TextInput text_input: The input text. (required)
        :param str x_caller:
        :return: TextPipelineResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_retrieve_with_http_info(instance_name, text_input, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_retrieve_with_http_info(instance_name, text_input, **kwargs)  # noqa: E501
            return data

    def text_pipeline_retrieve_with_http_info(self, instance_name, text_input, **kwargs):  # noqa: E501
        """Run the text pipeline and return the results.  # noqa: E501

        Run the text pipeline and return the results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_retrieve_with_http_info(instance_name, text_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param TextInput text_input: The input text. (required)
        :param str x_caller:
        :return: TextPipelineResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'text_input', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_retrieve`")  # noqa: E501
        # verify the required parameter 'text_input' is set
        if ('text_input' not in params or
                params['text_input'] is None):
            raise ValueError("Missing the required parameter `text_input` when calling `text_pipeline_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'text_input' in params:
            body_params = params['text_input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/retrieve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TextPipelineResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_set_params(self, instance_name, pipeline_params, **kwargs):  # noqa: E501
        """Set the model parameters of named text pipeline.  # noqa: E501

        Set the model parameters of named text pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_set_params(instance_name, pipeline_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param PipelineParams pipeline_params: The model parameters. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_set_params_with_http_info(instance_name, pipeline_params, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_set_params_with_http_info(instance_name, pipeline_params, **kwargs)  # noqa: E501
            return data

    def text_pipeline_set_params_with_http_info(self, instance_name, pipeline_params, **kwargs):  # noqa: E501
        """Set the model parameters of named text pipeline.  # noqa: E501

        Set the model parameters of named text pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_set_params_with_http_info(instance_name, pipeline_params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param PipelineParams pipeline_params: The model parameters. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'pipeline_params', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_set_params" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_set_params`")  # noqa: E501
        # verify the required parameter 'pipeline_params' is set
        if ('pipeline_params' not in params or
                params['pipeline_params'] is None):
            raise ValueError("Missing the required parameter `pipeline_params` when calling `text_pipeline_set_params`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_params' in params:
            body_params = params['pipeline_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/params', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TextPipelineInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_update_models(self, instance_name, pipeline_model_list, **kwargs):  # noqa: E501
        """Update pipeline models by UUID.  # noqa: E501

        Update models of the named text pipeline. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_update_models(instance_name, pipeline_model_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param list[PipelineModel] pipeline_model_list: List of pipeline models to update. A sample's UUIDs is used to uniquely identify it. (required)
        :param str x_caller:
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_update_models_with_http_info(instance_name, pipeline_model_list, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_update_models_with_http_info(instance_name, pipeline_model_list, **kwargs)  # noqa: E501
            return data

    def text_pipeline_update_models_with_http_info(self, instance_name, pipeline_model_list, **kwargs):  # noqa: E501
        """Update pipeline models by UUID.  # noqa: E501

        Update models of the named text pipeline. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_update_models_with_http_info(instance_name, pipeline_model_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param list[PipelineModel] pipeline_model_list: List of pipeline models to update. A sample's UUIDs is used to uniquely identify it. (required)
        :param str x_caller:
        :return: list[PipelineModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'pipeline_model_list', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_update_models" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_update_models`")  # noqa: E501
        # verify the required parameter 'pipeline_model_list' is set
        if ('pipeline_model_list' not in params or
                params['pipeline_model_list'] is None):
            raise ValueError("Missing the required parameter `pipeline_model_list` when calling `text_pipeline_update_models`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_model_list' in params:
            body_params = params['pipeline_model_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/models', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PipelineModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def text_pipeline_vaporise(self, instance_name, **kwargs):  # noqa: E501
        """Vaporise the named pipeline.  # noqa: E501

        Permanently vaporises a model even if not trashed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_vaporise(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.text_pipeline_vaporise_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.text_pipeline_vaporise_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def text_pipeline_vaporise_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Vaporise the named pipeline.  # noqa: E501

        Permanently vaporises a model even if not trashed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.text_pipeline_vaporise_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: TextPipelineInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method text_pipeline_vaporise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `text_pipeline_vaporise`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/text_pipelines/{instance_name}/vaporise', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TextPipelineInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
