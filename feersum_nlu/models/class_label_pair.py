# coding: utf-8

"""
    FeersumNLU API

    This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.  # noqa: E501

    OpenAPI spec version: 2.0.42.post2
    Contact: nlu@feersum.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClassLabelPair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'true_label': 'str',
        'predicted_label': 'str',
        'matrix_name': 'str'
    }

    attribute_map = {
        'true_label': 'true_label',
        'predicted_label': 'predicted_label',
        'matrix_name': 'matrix_name'
    }

    def __init__(self, true_label=None, predicted_label=None, matrix_name=None):  # noqa: E501
        """ClassLabelPair - a model defined in Swagger"""  # noqa: E501

        self._true_label = None
        self._predicted_label = None
        self._matrix_name = None
        self.discriminator = None

        self.true_label = true_label
        self.predicted_label = predicted_label
        self.matrix_name = matrix_name

    @property
    def true_label(self):
        """Gets the true_label of this ClassLabelPair.  # noqa: E501


        :return: The true_label of this ClassLabelPair.  # noqa: E501
        :rtype: str
        """
        return self._true_label

    @true_label.setter
    def true_label(self, true_label):
        """Sets the true_label of this ClassLabelPair.


        :param true_label: The true_label of this ClassLabelPair.  # noqa: E501
        :type: str
        """
        if true_label is None:
            raise ValueError("Invalid value for `true_label`, must not be `None`")  # noqa: E501

        self._true_label = true_label

    @property
    def predicted_label(self):
        """Gets the predicted_label of this ClassLabelPair.  # noqa: E501


        :return: The predicted_label of this ClassLabelPair.  # noqa: E501
        :rtype: str
        """
        return self._predicted_label

    @predicted_label.setter
    def predicted_label(self, predicted_label):
        """Sets the predicted_label of this ClassLabelPair.


        :param predicted_label: The predicted_label of this ClassLabelPair.  # noqa: E501
        :type: str
        """
        if predicted_label is None:
            raise ValueError("Invalid value for `predicted_label`, must not be `None`")  # noqa: E501

        self._predicted_label = predicted_label

    @property
    def matrix_name(self):
        """Gets the matrix_name of this ClassLabelPair.  # noqa: E501

        The confusion matrix to use. Should be either 'train' or 'test' which refers to the confusion matrix of the training data or the testing data respectively.  # noqa: E501

        :return: The matrix_name of this ClassLabelPair.  # noqa: E501
        :rtype: str
        """
        return self._matrix_name

    @matrix_name.setter
    def matrix_name(self, matrix_name):
        """Sets the matrix_name of this ClassLabelPair.

        The confusion matrix to use. Should be either 'train' or 'test' which refers to the confusion matrix of the training data or the testing data respectively.  # noqa: E501

        :param matrix_name: The matrix_name of this ClassLabelPair.  # noqa: E501
        :type: str
        """
        if matrix_name is None:
            raise ValueError("Invalid value for `matrix_name`, must not be `None`")  # noqa: E501

        self._matrix_name = matrix_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClassLabelPair, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassLabelPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
