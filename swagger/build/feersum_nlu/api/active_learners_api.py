# coding: utf-8

"""
    FeersumNLU API

    This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.  # noqa: E501

    OpenAPI spec version: 2.0.55
    Contact: nlu@feersum.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from feersum_nlu.api_client import ApiClient


class ActiveLearnersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def active_learner_add_samples(self, instance_name, labelled_text_sample_list, **kwargs):  # noqa: E501
        """Add  samples.  # noqa: E501

        Add  samples to named active learner. Returns the samples added to the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_add_samples(instance_name, labelled_text_sample_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param list[LabelledTextSample] labelled_text_sample_list: List of labelled text samples. (required)
        :param str x_caller:
        :return: ActiveLearnerCandidates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_add_samples_with_http_info(instance_name, labelled_text_sample_list, **kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_add_samples_with_http_info(instance_name, labelled_text_sample_list, **kwargs)  # noqa: E501
            return data

    def active_learner_add_samples_with_http_info(self, instance_name, labelled_text_sample_list, **kwargs):  # noqa: E501
        """Add  samples.  # noqa: E501

        Add  samples to named active learner. Returns the samples added to the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_add_samples_with_http_info(instance_name, labelled_text_sample_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param list[LabelledTextSample] labelled_text_sample_list: List of labelled text samples. (required)
        :param str x_caller:
        :return: ActiveLearnerCandidates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'labelled_text_sample_list', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_add_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `active_learner_add_samples`")  # noqa: E501
        # verify the required parameter 'labelled_text_sample_list' is set
        if ('labelled_text_sample_list' not in params or
                params['labelled_text_sample_list'] is None):
            raise ValueError("Missing the required parameter `labelled_text_sample_list` when calling `active_learner_add_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'labelled_text_sample_list' in params:
            body_params = params['labelled_text_sample_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners/{instance_name}/samples', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActiveLearnerCandidates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def active_learner_create(self, create_details, **kwargs):  # noqa: E501
        """Create an active learner.  # noqa: E501

        Create a new active learner or reload one from the trash. Returns the details of the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_create(create_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActiveLearnerInstanceDetail create_details: The details of the instance to create. (required)
        :param str x_caller:
        :return: ActiveLearnerCandidates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_create_with_http_info(create_details, **kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_create_with_http_info(create_details, **kwargs)  # noqa: E501
            return data

    def active_learner_create_with_http_info(self, create_details, **kwargs):  # noqa: E501
        """Create an active learner.  # noqa: E501

        Create a new active learner or reload one from the trash. Returns the details of the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_create_with_http_info(create_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ActiveLearnerInstanceDetail create_details: The details of the instance to create. (required)
        :param str x_caller:
        :return: ActiveLearnerCandidates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_details', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_details' is set
        if ('create_details' not in params or
                params['create_details'] is None):
            raise ValueError("Missing the required parameter `create_details` when calling `active_learner_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_details' in params:
            body_params = params['create_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActiveLearnerCandidates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def active_learner_create_from_path(self, instance_name, create_details, **kwargs):  # noqa: E501
        """Create an active learner.  # noqa: E501

        Create a new active learner or reload one from the trash. Returns the details of the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_create_from_path(instance_name, create_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param ActiveLearnerInstanceDetail create_details: The details of the instance to create. (required)
        :param str x_caller:
        :return: ActiveLearnerCandidates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_create_from_path_with_http_info(instance_name, create_details, **kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_create_from_path_with_http_info(instance_name, create_details, **kwargs)  # noqa: E501
            return data

    def active_learner_create_from_path_with_http_info(self, instance_name, create_details, **kwargs):  # noqa: E501
        """Create an active learner.  # noqa: E501

        Create a new active learner or reload one from the trash. Returns the details of the instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_create_from_path_with_http_info(instance_name, create_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param ActiveLearnerInstanceDetail create_details: The details of the instance to create. (required)
        :param str x_caller:
        :return: ActiveLearnerCandidates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'create_details', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_create_from_path" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `active_learner_create_from_path`")  # noqa: E501
        # verify the required parameter 'create_details' is set
        if ('create_details' not in params or
                params['create_details'] is None):
            raise ValueError("Missing the required parameter `create_details` when calling `active_learner_create_from_path`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_details' in params:
            body_params = params['create_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners/{instance_name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActiveLearnerCandidates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def active_learner_del(self, instance_name, **kwargs):  # noqa: E501
        """Delete named instance.  # noqa: E501

        Delete and return the details of the named active learner instance. Deleted models can be reloaded from the trash with the create operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_del(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: ActiveLearnerInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_del_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_del_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def active_learner_del_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Delete named instance.  # noqa: E501

        Delete and return the details of the named active learner instance. Deleted models can be reloaded from the trash with the create operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_del_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: ActiveLearnerInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_del" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `active_learner_del`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners/{instance_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActiveLearnerInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def active_learner_get_details(self, instance_name, **kwargs):  # noqa: E501
        """Get details of named instance.  # noqa: E501

        Get the details of the named active learner instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_get_details(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: ActiveLearnerInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_get_details_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_get_details_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def active_learner_get_details_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Get details of named instance.  # noqa: E501

        Get the details of the named active learner instance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_get_details_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: ActiveLearnerInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_get_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `active_learner_get_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners/{instance_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActiveLearnerInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def active_learner_get_details_all(self, **kwargs):  # noqa: E501
        """Get list of active learners.  # noqa: E501

        Get the list of active learners.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_get_details_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_caller:
        :return: list[ActiveLearnerInstanceDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_get_details_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_get_details_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def active_learner_get_details_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of active learners.  # noqa: E501

        Get the list of active learners.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_get_details_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_caller:
        :return: list[ActiveLearnerInstanceDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_get_details_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ActiveLearnerInstanceDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def active_learner_get_labels(self, instance_name, **kwargs):  # noqa: E501
        """Get list of possible labels.  # noqa: E501

        Returns the active learner's list of possible class labels.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_get_labels(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: list[ClassLabel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_get_labels_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_get_labels_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def active_learner_get_labels_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Get list of possible labels.  # noqa: E501

        Returns the active learner's list of possible class labels.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_get_labels_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: list[ClassLabel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_get_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `active_learner_get_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners/{instance_name}/labels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClassLabel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def active_learner_get_samples(self, instance_name, **kwargs):  # noqa: E501
        """Get labelled samples.  # noqa: E501

        Get the labelled samples from the named active learner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_get_samples(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: list[LabelledTextSample]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_get_samples_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_get_samples_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def active_learner_get_samples_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Get labelled samples.  # noqa: E501

        Get the labelled samples from the named active learner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_get_samples_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: list[LabelledTextSample]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_get_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `active_learner_get_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners/{instance_name}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LabelledTextSample]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def active_learner_vaporise(self, instance_name, **kwargs):  # noqa: E501
        """Vaporise the named model.  # noqa: E501

        Permanently vaporises a model even if not trashed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_vaporise(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: ActiveLearnerInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.active_learner_vaporise_with_http_info(instance_name, **kwargs)  # noqa: E501
        else:
            (data) = self.active_learner_vaporise_with_http_info(instance_name, **kwargs)  # noqa: E501
            return data

    def active_learner_vaporise_with_http_info(self, instance_name, **kwargs):  # noqa: E501
        """Vaporise the named model.  # noqa: E501

        Permanently vaporises a model even if not trashed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.active_learner_vaporise_with_http_info(instance_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instance_name: The name of the instance. (required)
        :param str x_caller:
        :return: ActiveLearnerInstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'x_caller']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_learner_vaporise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params or
                params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `active_learner_vaporise`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_caller' in params:
            header_params['X-CALLER'] = params['x_caller']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyHeader_old']  # noqa: E501

        return self.api_client.call_api(
            '/nlu/v2/active_learners/{instance_name}/vaporise', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActiveLearnerInstanceDetail',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
