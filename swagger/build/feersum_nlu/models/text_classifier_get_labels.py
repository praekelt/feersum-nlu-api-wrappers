# coding: utf-8

"""
    FeersumNLU API

    This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.  # noqa: E501

    OpenAPI spec version: 2.0.55
    Contact: nlu@feersum.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from feersum_nlu.models.labelled_text_sample import LabelledTextSample  # noqa: F401,E501


class TextClassifierGetLabels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'long_name': 'str',
        'desc': 'str',
        'load_from_store': 'bool',
        'revision_uuid': 'str',
        'labelled_text_sample_list': 'list[LabelledTextSample]',
        'score': 'float'
    }

    attribute_map = {
        'name': 'name',
        'long_name': 'long_name',
        'desc': 'desc',
        'load_from_store': 'load_from_store',
        'revision_uuid': 'revision_uuid',
        'labelled_text_sample_list': 'labelled_text_sample_list',
        'score': 'score'
    }

    def __init__(self, name=None, long_name=None, desc=None, load_from_store=None, revision_uuid=None, labelled_text_sample_list=None, score=None):  # noqa: E501
        """TextClassifierGetLabels - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._long_name = None
        self._desc = None
        self._load_from_store = None
        self._revision_uuid = None
        self._labelled_text_sample_list = None
        self._score = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if long_name is not None:
            self.long_name = long_name
        if desc is not None:
            self.desc = desc
        if load_from_store is not None:
            self.load_from_store = load_from_store
        if revision_uuid is not None:
            self.revision_uuid = revision_uuid
        if labelled_text_sample_list is not None:
            self.labelled_text_sample_list = labelled_text_sample_list
        if score is not None:
            self.score = score

    @property
    def name(self):
        """Gets the name of this TextClassifierGetLabels.  # noqa: E501

        The sluggy-url-friendly-name of the instance.  # noqa: E501

        :return: The name of this TextClassifierGetLabels.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TextClassifierGetLabels.

        The sluggy-url-friendly-name of the instance.  # noqa: E501

        :param name: The name of this TextClassifierGetLabels.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def long_name(self):
        """Gets the long_name of this TextClassifierGetLabels.  # noqa: E501

        The human-friendly-name of the instance.  # noqa: E501

        :return: The long_name of this TextClassifierGetLabels.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this TextClassifierGetLabels.

        The human-friendly-name of the instance.  # noqa: E501

        :param long_name: The long_name of this TextClassifierGetLabels.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def desc(self):
        """Gets the desc of this TextClassifierGetLabels.  # noqa: E501

        The longer existential description of this instance's purpose in life.  # noqa: E501

        :return: The desc of this TextClassifierGetLabels.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this TextClassifierGetLabels.

        The longer existential description of this instance's purpose in life.  # noqa: E501

        :param desc: The desc of this TextClassifierGetLabels.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def load_from_store(self):
        """Gets the load_from_store of this TextClassifierGetLabels.  # noqa: E501

        Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.  # noqa: E501

        :return: The load_from_store of this TextClassifierGetLabels.  # noqa: E501
        :rtype: bool
        """
        return self._load_from_store

    @load_from_store.setter
    def load_from_store(self, load_from_store):
        """Sets the load_from_store of this TextClassifierGetLabels.

        Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.  # noqa: E501

        :param load_from_store: The load_from_store of this TextClassifierGetLabels.  # noqa: E501
        :type: bool
        """

        self._load_from_store = load_from_store

    @property
    def revision_uuid(self):
        """Gets the revision_uuid of this TextClassifierGetLabels.  # noqa: E501

        If provided, the uuid of the revision of the instance to try and load from the history.  # noqa: E501

        :return: The revision_uuid of this TextClassifierGetLabels.  # noqa: E501
        :rtype: str
        """
        return self._revision_uuid

    @revision_uuid.setter
    def revision_uuid(self, revision_uuid):
        """Sets the revision_uuid of this TextClassifierGetLabels.

        If provided, the uuid of the revision of the instance to try and load from the history.  # noqa: E501

        :param revision_uuid: The revision_uuid of this TextClassifierGetLabels.  # noqa: E501
        :type: str
        """

        self._revision_uuid = revision_uuid

    @property
    def labelled_text_sample_list(self):
        """Gets the labelled_text_sample_list of this TextClassifierGetLabels.  # noqa: E501

        List of labelled text samples.  # noqa: E501

        :return: The labelled_text_sample_list of this TextClassifierGetLabels.  # noqa: E501
        :rtype: list[LabelledTextSample]
        """
        return self._labelled_text_sample_list

    @labelled_text_sample_list.setter
    def labelled_text_sample_list(self, labelled_text_sample_list):
        """Sets the labelled_text_sample_list of this TextClassifierGetLabels.

        List of labelled text samples.  # noqa: E501

        :param labelled_text_sample_list: The labelled_text_sample_list of this TextClassifierGetLabels.  # noqa: E501
        :type: list[LabelledTextSample]
        """

        self._labelled_text_sample_list = labelled_text_sample_list

    @property
    def score(self):
        """Gets the score of this TextClassifierGetLabels.  # noqa: E501

        The quality metric to track the performance of active labelling.  # noqa: E501

        :return: The score of this TextClassifierGetLabels.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TextClassifierGetLabels.

        The quality metric to track the performance of active labelling.  # noqa: E501

        :param score: The score of this TextClassifierGetLabels.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TextClassifierGetLabels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextClassifierGetLabels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
