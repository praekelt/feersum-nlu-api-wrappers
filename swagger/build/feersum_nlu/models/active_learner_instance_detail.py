# coding: utf-8

"""
    FeersumNLU API

    This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.  # noqa: E501

    OpenAPI spec version: 2.0.55
    Contact: nlu@feersum.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActiveLearnerInstanceDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'long_name': 'str',
        'desc': 'str',
        'readonly': 'bool',
        'clsfr_algorithm': 'str',
        'alm_algorithm': 'str',
        'sentence_encoder_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'long_name': 'long_name',
        'desc': 'desc',
        'readonly': 'readonly',
        'clsfr_algorithm': 'clsfr_algorithm',
        'alm_algorithm': 'alm_algorithm',
        'sentence_encoder_name': 'sentence_encoder_name'
    }

    def __init__(self, name=None, long_name=None, desc=None, readonly=None, clsfr_algorithm=None, alm_algorithm=None, sentence_encoder_name=None):  # noqa: E501
        """ActiveLearnerInstanceDetail - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._long_name = None
        self._desc = None
        self._readonly = None
        self._clsfr_algorithm = None
        self._alm_algorithm = None
        self._sentence_encoder_name = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if long_name is not None:
            self.long_name = long_name
        if desc is not None:
            self.desc = desc
        if readonly is not None:
            self.readonly = readonly
        if clsfr_algorithm is not None:
            self.clsfr_algorithm = clsfr_algorithm
        if alm_algorithm is not None:
            self.alm_algorithm = alm_algorithm
        if sentence_encoder_name is not None:
            self.sentence_encoder_name = sentence_encoder_name

    @property
    def name(self):
        """Gets the name of this ActiveLearnerInstanceDetail.  # noqa: E501

        The sluggy-url-friendly-name of the instance.  # noqa: E501

        :return: The name of this ActiveLearnerInstanceDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActiveLearnerInstanceDetail.

        The sluggy-url-friendly-name of the instance.  # noqa: E501

        :param name: The name of this ActiveLearnerInstanceDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def long_name(self):
        """Gets the long_name of this ActiveLearnerInstanceDetail.  # noqa: E501

        The human-friendly-name of the instance.  # noqa: E501

        :return: The long_name of this ActiveLearnerInstanceDetail.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this ActiveLearnerInstanceDetail.

        The human-friendly-name of the instance.  # noqa: E501

        :param long_name: The long_name of this ActiveLearnerInstanceDetail.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def desc(self):
        """Gets the desc of this ActiveLearnerInstanceDetail.  # noqa: E501

        The longer existential description of this instance's purpose in life.  # noqa: E501

        :return: The desc of this ActiveLearnerInstanceDetail.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this ActiveLearnerInstanceDetail.

        The longer existential description of this instance's purpose in life.  # noqa: E501

        :param desc: The desc of this ActiveLearnerInstanceDetail.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def readonly(self):
        """Gets the readonly of this ActiveLearnerInstanceDetail.  # noqa: E501

        Indicates if the model is readonly and not editable.  # noqa: E501

        :return: The readonly of this ActiveLearnerInstanceDetail.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this ActiveLearnerInstanceDetail.

        Indicates if the model is readonly and not editable.  # noqa: E501

        :param readonly: The readonly of this ActiveLearnerInstanceDetail.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def clsfr_algorithm(self):
        """Gets the clsfr_algorithm of this ActiveLearnerInstanceDetail.  # noqa: E501

        The name of the classifier used inside the active learner  # noqa: E501

        :return: The clsfr_algorithm of this ActiveLearnerInstanceDetail.  # noqa: E501
        :rtype: str
        """
        return self._clsfr_algorithm

    @clsfr_algorithm.setter
    def clsfr_algorithm(self, clsfr_algorithm):
        """Sets the clsfr_algorithm of this ActiveLearnerInstanceDetail.

        The name of the classifier used inside the active learner  # noqa: E501

        :param clsfr_algorithm: The clsfr_algorithm of this ActiveLearnerInstanceDetail.  # noqa: E501
        :type: str
        """

        self._clsfr_algorithm = clsfr_algorithm

    @property
    def alm_algorithm(self):
        """Gets the alm_algorithm of this ActiveLearnerInstanceDetail.  # noqa: E501

        The type of active learner used  # noqa: E501

        :return: The alm_algorithm of this ActiveLearnerInstanceDetail.  # noqa: E501
        :rtype: str
        """
        return self._alm_algorithm

    @alm_algorithm.setter
    def alm_algorithm(self, alm_algorithm):
        """Sets the alm_algorithm of this ActiveLearnerInstanceDetail.

        The type of active learner used  # noqa: E501

        :param alm_algorithm: The alm_algorithm of this ActiveLearnerInstanceDetail.  # noqa: E501
        :type: str
        """

        self._alm_algorithm = alm_algorithm

    @property
    def sentence_encoder_name(self):
        """Gets the sentence_encoder_name of this ActiveLearnerInstanceDetail.  # noqa: E501

        The model to encode sentences, used for clustering  # noqa: E501

        :return: The sentence_encoder_name of this ActiveLearnerInstanceDetail.  # noqa: E501
        :rtype: str
        """
        return self._sentence_encoder_name

    @sentence_encoder_name.setter
    def sentence_encoder_name(self, sentence_encoder_name):
        """Sets the sentence_encoder_name of this ActiveLearnerInstanceDetail.

        The model to encode sentences, used for clustering  # noqa: E501

        :param sentence_encoder_name: The sentence_encoder_name of this ActiveLearnerInstanceDetail.  # noqa: E501
        :type: str
        """

        self._sentence_encoder_name = sentence_encoder_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActiveLearnerInstanceDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActiveLearnerInstanceDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
