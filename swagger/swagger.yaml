swagger: "2.0"

info:
  description: This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.
  version: 2.0.49
  title: FeersumNLU API
  contact:
    name: Feersum Engine
    url: https://www.feersum.io
    email: nlu@feersum.io

host: nlu.feersum.io:443

# basePath: /nlu/v2 (outdated; full path now specified in the endpoints.)

schemes:
  - https
#  - http

consumes:
- application/json
produces:
- application/json

# Global security (applies to all operations):
securityDefinitions:
   APIKeyHeader_old:
     type: apiKey
     x-apikeyInfoFunc: rest_api.flask_server.controllers.controller_util.api_key_auth
     in: header
     name: AUTH_TOKEN
   APIKeyHeader:
     type: apiKey
     x-apikeyInfoFunc: rest_api.flask_server.controllers.controller_util.api_key_auth
     in: header
     name: X-Auth-Token

security:
- APIKeyHeader_old: []
- APIKeyHeader: []

tags:
- name: dashboard
  description: A service endpoint to get your list of model instances. 'Try it out!' to see what models are already created for you.
- name: text_classifiers
  description: The API to your text classifier instances useful for things like classifying phrases into predefined action or intent categories. Create a model, add some training data, train it and start doing retrieve/inference calls. A variety of shallow to deep classifier algorithms and language models can be selected at training time from naive Bayes and SVM to fully connected neural classifiers using USent and Elmo features.
- name: text_datasets
  description: The API to your labelled text datasets useful for things like labelling data.
# - name: word_manifolds
#   description: The API to your word embedding model instances. The service is pre-loaded with default word embeddings sufficient for most use cases.
- name: intent_classifiers
  description: The API to your intent classifier model instances used to classify a user's utterance into a predefined action or intent category.
- name: faq_matchers
  description: The API to your FAQ matcher/classifier model instances useful to match a user's question to a list of predefined FAQs.
- name: language_recognisers
  description: The API to your language recogniser model instances. An 'lid_za' input model file is available and trained on all 11 South African languages. Create a model as shown and start doing language ident on your own text.
- name: lr4_language_recognisers
  description: The API to your lr4 language recogniser model instances (deprecated; please use language_recognisers instead). An 'lid_za' input model file is available and trained on all 11 South African languages. Create a model as shown and start doing language ident on your own text.
- name: date_parsers
  description: The API to a pre-configured 'generic' date parser.
- name: sentiment_detectors
  description: The API to a pre-configured low recall English sentiment detector. Contact us for other languages.
- name: emotion_classifiers
  description: The API to a pre-configured low recall English emotion classifier. Contact us for other languages.
- name: regex_entity_extractors
  description: The API to your regular expression entity extractor instances. The extractor returns and labels the text that matched the named regex patterns.
# - name: person_name_entity_extractors
#   description: The API to your person_name entity extractor instances. The extractor returns a list of person names found in the text.
- name: duckling_entity_extractors
  description: The API to your duckling entity extractor instances for things like dates, distances, volumes, etc. The extractor returns the text recognised as a duckling entity and its parsed/formatted value.
- name: sim_word_entity_extractors
  description: The API to your similar/related words entity extractor instances. The extractor returns the text that matched the listed targets words within the given threshold.
- name: synonym_entity_extractors
  description: The API to your synonym entity extractor instances. The extractor matches text to a number of synonym sets and returns the set label and matched text.
- name: crf_entity_extractors
  description: The API to your crf entity extractor instances. The extractor recognises words as entities within the context of the rest of the text. The extractor returns the entity label as well as the associated words from the text.
- name: data_objects
  description: The API to a general data_object store useful to hold general application data like user profiles, logs and tables. A data_object is, similar to a json object, of type JSONObj = Union[str, int, float, bool, None, Dict[str, JSONObj], List[JSONObj]].
- name: health
  description: An enpoint to check if the service is alive and well.
- name: api_keys
  description: An enpoint to manage API keys.
- name: image_classifiers
  description: The API to your image classifier instances. Create a model, add some training data, train it and start doing retrieve/inference calls.
- name: image_datasets
  description: The API to your labelled image datasets useful for things like labelling data. Store unlabelled samples with a label like '_unlabelled'.
- name: image_readers
  description: The API to your image reader instances.
- name: text_pipelines
  description: Build an NLU pipeline with annotators, extractors and classifiers. The annotators enrich the text with POS tags, etc. after which the classifiers and extractors run.


paths:
###################################
###################################
########
## dashboard root
########
  /dashboard/v2/dashboard:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - dashboard
      summary: Your root service dashboard. Same as POST endpoint, but doesn't allow params to be supplied to the operation.
      x-swagger-router-controller: rest_api.flask_server.controllers.dashboard_controller
      operationId: dashboard_get_details
      description: Get your list of model instances, the API version, etc. Same as POST endpoint, but doesn't allow params to be supplied to the operation.
      responses:
        200:
          $ref: "#/responses/dashboard_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    post:
      tags:
      - dashboard
      summary: Your root service dashboard. Same as GET endpoint, but allows params to be supplied to the operation.
      x-swagger-router-controller: rest_api.flask_server.controllers.dashboard_controller
      operationId: dashboard_get_details_with_params
      description: Get your list of model instances, the API version, etc. Same as GET endpoint, but allows params to be supplied to the operation.
      parameters:
      - in: body
        name: params
        description: Params like 'show_data_objects' that influence the dashboard's response.
        required: true
        schema:
          $ref: "#/definitions/dashboard_params"
      responses:
        200:
          $ref: "#/responses/dashboard_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## dashboard nlu
########
  /nlu/v2/dashboard:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - dashboard
      summary: Your nlu service dashboard. Same as POST endpoint, but doesn't allow params to be supplied to the operation.
      x-swagger-router-controller: rest_api.flask_server.controllers.dashboard_controller
      operationId: dashboard_nlu_get_details
      description: Get your list of model instances, the API version, etc. Same as POST endpoint, but doesn't allow params to be supplied to the operation.
      responses:
        200:
          $ref: "#/responses/dashboard_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    post:
      tags:
      - dashboard
      summary: Your nlu service dashboard. Same as GET endpoint, but allows params to be supplied to the operation.
      x-swagger-router-controller: rest_api.flask_server.controllers.dashboard_controller
      operationId: dashboard_nlu_get_details_with_params
      description: Get your list of model instances, the API version, etc. Same as GET endpoint, but allows params to be supplied to the operation.
      parameters:
      - in: body
        name: params
        description: Params like 'show_data_objects' that influence the dashboard's response.
        required: true
        schema:
          $ref: "#/definitions/dashboard_params"
      responses:
        200:
          $ref: "#/responses/dashboard_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## dashboard nlu
########
  /nlu/v2/params:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - params
      summary: Get the service params.
      x-swagger-router-controller: rest_api.flask_server.controllers.params_controller
      operationId: params_nlu_get
      description: Set the service params.
      responses:
        200:
          $ref: "#/responses/service_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    post:
      tags:
      - params
      summary: Set the service params.
      x-swagger-router-controller: rest_api.flask_server.controllers.params_controller
      operationId: params_nlu_set
      description: Set the service params.
      parameters:
      - in: body
        name: params
        required: true
        schema:
          $ref: "#/definitions/service_params"
      responses:
        200:
          $ref: "#/responses/service_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## dashboard vision
########
  /vision/v2/dashboard:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - dashboard
      summary: Your vision service dashboard. Same as POST endpoint, but doesn't allow params to be supplied to the operation.
      x-swagger-router-controller: rest_api.flask_server.controllers.dashboard_controller
      operationId: dashboard_vision_get_details
      description: Get your list of model instances, the API version, etc. Same as POST endpoint, but doesn't allow params to be supplied to the operation.
      responses:
        200:
          $ref: "#/responses/dashboard_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    post:
      tags:
      - dashboard
      summary: Your vision service dashboard. Same as GET endpoint, but allows params to be supplied to the operation.
      x-swagger-router-controller: rest_api.flask_server.controllers.dashboard_controller
      operationId: dashboard_vision_get_details_with_params
      description: Get your list of model instances, the API version, etc. Same as GET endpoint, but allows params to be supplied to the operation.
      parameters:
      - in: body
        name: params
        description: Params like 'show_data_objects' that influence the dashboard's response.
        required: true
        schema:
          $ref: "#/definitions/dashboard_params"
      responses:
        200:
          $ref: "#/responses/dashboard_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## dashboard audio
########
  /audio/v2/dashboard:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - dashboard
      summary: Your audio service dashboard. Same as POST endpoint, but doesn't allow params to be supplied to the operation.
      x-swagger-router-controller: rest_api.flask_server.controllers.dashboard_controller
      operationId: dashboard_audio_get_details
      description: Get your list of model instances, the API version, etc. Same as POST endpoint, but doesn't allow params to be supplied to the operation.
      responses:
        200:
          $ref: "#/responses/dashboard_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    post:
      tags:
      - dashboard
      summary: Your audio service dashboard. Same as GET endpoint, but allows params to be supplied to the operation.
      x-swagger-router-controller: rest_api.flask_server.controllers.dashboard_controller
      operationId: dashboard_audio_get_details_with_params
      description: Get your list of model instances, the API version, etc. Same as GET endpoint, but allows params to be supplied to the operation.
      parameters:
      - in: body
        name: params
        description: Params like 'show_data_objects' that influence the dashboard's response.
        required: true
        schema:
          $ref: "#/definitions/dashboard_params"
      responses:
        200:
          $ref: "#/responses/dashboard_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

###################################
###################################
########
## text_classifiers root
########
  /nlu/v2/text_classifiers:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Create a text classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_create
      description: Create a new text classifier or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/text_classifier_create_details"

      responses:
        200:
          $ref: "#/responses/text_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_classifiers
      summary: Get list of text classifiers.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_get_details_all
      description: Get the list of text classifiers.
      responses:
        200:
          $ref: "#/responses/text_classifier_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers named instance
########
  /nlu/v2/text_classifiers/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Create a text classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_create_from_path
      description: Create a new text classifier or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/text_classifier_create_details"

      responses:
        200:
          $ref: "#/responses/text_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_classifiers
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_get_details
      description: Get the details of the named text classifier instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - text_classifiers
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_del
      description: Delete and return the details of the named text classifier instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers training samples
########
  /nlu/v2/text_classifiers/{instance_name}/training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Add training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_add_training_samples
      description: Add training samples to named text classifier. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - text_classifiers
      summary: Update training samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_update_training_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of text samples to update. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_classifiers
      summary: Get training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_get_training_samples
      description: Get the training samples of the named text classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - text_classifiers
      summary: Delete training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_del_training_samples
      description: Delete the listed training samples of the named text classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/text_classifiers/{instance_name}/training_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - text_classifiers
      summary: Delete all training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_del_training_samples_all
      description: Delete all training samples of the named text classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers testing samples
########
  /nlu/v2/text_classifiers/{instance_name}/testing_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Add testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_add_testing_samples
      description: Add testing samples to named text classifier. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - text_classifiers
      summary: Update testing samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_update_testing_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of text samples to update. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_classifiers
      summary: Get testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_get_testing_samples
      description: Get the testing samples of the named text classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - text_classifiers
      summary: Delete testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_del_testing_samples
      description: Delete the listed testing samples of the named text classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/text_classifiers/{instance_name}/testing_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - text_classifiers
      summary: Delete testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_del_testing_samples_all
      description: Delete all testing samples of the named text classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers train
########
  /nlu/v2/text_classifiers/{instance_name}/train:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Train the named text classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_train
      description: Train the named text classifier with the training and testing data already provided. Returns the details of the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: train_details
        description: The arguments provided to the train operation.
        required: true
        schema:
          $ref: "#/definitions/train_details"
      responses:
        200:
          $ref: "#/responses/text_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers model_params
########
  /nlu/v2/text_classifiers/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Set the model parameters of named text classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_set_params
      description: Set the model parameters of named text classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/text_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_classifiers
      summary: Get the editable model parameters of named text classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_get_params
      description: Get the editable model parameters of named text classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers train online
########
  /nlu/v2/text_classifiers/{instance_name}/online_training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Train/update the classifier online with the samples provided.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_online_training_samples
      description: Train/update the classifier online with the samples provided. This operation is more efficient than a full re-train. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers retrieve
########
  /nlu/v2/text_classifiers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Classify text.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_retrieve
      description: Classifies the text and returns a probability sorted list of classes.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/scored_label_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers vaporise
########
  /nlu/v2/text_classifiers/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers get list of class labels
########
  /nlu/v2/text_classifiers/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - text_classifiers
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_get_labels
      description: Returns the classifier's list of possible class labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers curation endpoint
########
  /nlu/v2/text_classifiers/{instance_name}/curate:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Endpoint to aid in the curation of an instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_curate
      description: Returns the list of samples behind a cell of the confusion matrix of the training or testing samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: label_pair
        description: The true label, predicted label and matrix (train/test) to use.
        required: true
        schema:
          $ref: "#/definitions/class_label_pair"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_classifiers tsne endpoint
########
  /nlu/v2/text_classifiers/{instance_name}/tsne:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_classifiers
      summary: Endpoint to start a TSNE process.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_tsne_post
      description: Starts a TSNE process.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: tsne_settings
        description: The TSNE settings.
        required: true
        schema:
          $ref: "#/definitions/tsne_settings"
      responses:
        200:
          description: successful request
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_classifiers
      summary: Get the latest results of TSNE.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_classifiers_controller
      operationId: text_classifier_tsne_get
      description: Get the latest results of TSNE.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/tsne_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


####################################
####################################
#########
### word_manifolds root
#########
#  /nlu/v2/word_manifolds:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    post:
#      tags:
#      - word_manifolds
#      summary: Create a word manifold model.
#      x-swagger-router-controller: rest_api.flask_server.controllers.word_manifolds_controller
#      operationId: word_manifold_create
#      description: Create a new word manifold model using an input file or reload one from the trash. Warning! - These models are quite big and each takes a few seconds to load/create. Returns the details of the instance.
#      parameters:
#      - in: body
#        name: create_details
#        description: The details of the word manifold instance to create.
#        required: true
#        schema:
#          $ref: "#/definitions/word_manifold_create_details"
#      responses:
#        200:
#          $ref: "#/responses/word_manifold_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#########
### word_manifolds named instance
#########
#  /nlu/v2/word_manifolds/{instance_name}:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    get:
#      tags:
#      - word_manifolds
#      summary: Get details of named instance.
#      x-swagger-router-controller: rest_api.flask_server.controllers.word_manifolds_controller
#      operationId: word_manifold_get_details
#      description: Get the details of the named word manifold instance.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      responses:
#        200:
#          $ref: "#/responses/word_manifold_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#    delete:
#      tags:
#      - word_manifolds
#      summary: Delete named instance.
#      x-swagger-router-controller: rest_api.flask_server.controllers.word_manifolds_controller
#      operationId: word_manifold_del
#      description: Delete and return the details of the word manifold instance. Deleted models can be reloaded from the trash with the create operation.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      responses:
#        200:
#          $ref: "#/responses/word_manifold_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#########
### word_manifolds vaporise
#########
#  /nlu/v2/word_manifolds/{instance_name}/vaporise:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    post:
#      tags:
#      - word_manifolds
#      summary: Vaporise the named model.
#      x-swagger-router-controller: rest_api.flask_server.controllers.word_manifolds_controller
#      operationId: word_manifold_vaporise
#      description: Permanently vaporises a model even if not trashed.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      responses:
#        200:
#          $ref: "#/responses/word_manifold_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#########
### word_manifolds vocab
#########
#  /nlu/v2/word_manifolds/{instance_name}/vocab:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    post:
#      tags:
#      - word_manifolds
#      summary: Add new words.
#      x-swagger-router-controller: rest_api.flask_server.controllers.word_manifolds_controller
#      operationId: word_manifold_add_similar_words
#      description: Add new words to the manifold that are similar to existing words and save the manifold. Warning! - Because this operation saves the updated word manifold to the store it could take a few seconds to complete. Returns the details of the updated instance.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      - in: body
#        name: new_word_list
#        description: List of new words.
#        required: true
#        schema:
#          type: array
#          items:
#            $ref: "#/definitions/new_word"
#      responses:
#        200:
#          $ref: "#/responses/word_manifold_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
# ########
# ## word_manifolds similar_words
# ########
#   /nlu/v2/word_manifolds/{instance_name}/similar_words:
#     parameters:
#     - $ref: '#/parameters/caller'
#
#     post:
#       tags:
#       - word_manifolds
#       summary: Find similar words.
#       x-swagger-router-controller: rest_api.flask_server.controllers.word_manifolds_controller
#       operationId: word_manifold_get_similar_words
#       description: Returns words from the manifold that are similar to the parameter word.
#       parameters:
#       - in: path
#         name: instance_name
#         description: The name of the instance.
#         required: true
#         type: string
#       - in: body
#         name: word_and_threshold
#         description: A word token and an accompanying threshold.
#         required: true
#         schema:
#           $ref: "#/definitions/word_and_threshold"
#       responses:
#         200:
#           $ref: "#/responses/word_and_distance_list"
#         400:
#           description: bad request
#         401:
#           $ref: "#/responses/UnauthorizedError"
#
# ########
# ## word_manifolds spell_correct
# ########
#   /nlu/v2/word_manifolds/{instance_name}/spell_correct:
#     parameters:
#     - $ref: '#/parameters/caller'
#
#     post:
#       tags:
#       - word_manifolds
#       summary: Spell correct a word.
#       x-swagger-router-controller: rest_api.flask_server.controllers.word_manifolds_controller
#       operationId: word_manifold_spell_correct
#       description: Spell correct a word replacing it with the most likely word from the manifold. Returns one or more scored candidate words.
#       parameters:
#       - in: path
#         name: instance_name
#         description: The name of the instance.
#         required: true
#         type: string
#       - in: body
#         name: text_input
#         description: The input text.
#         required: true
#         schema:
#           $ref: "#/definitions/text_input"
#       responses:
#         200:
#           $ref: "#/responses/word_and_distance_list"
#         400:
#           description: bad request
#         401:
#           $ref: "#/responses/UnauthorizedError"

###################################
###################################
########
## intent_classifiers root
########
  /nlu/v2/intent_classifiers:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Create an intent classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_create
      description: Create a new intent classifier or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/intent_classifier_create_details"
      responses:
        200:
          $ref: "#/responses/intent_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - intent_classifiers
      summary: Get list of intent classifiers.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_get_details_all
      description: Returns the list of intent classifiers.
      responses:
        200:
          $ref: "#/responses/intent_classifier_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers named instance
########
  /nlu/v2/intent_classifiers/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - intent_classifiers
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_get_details
      description: Returns the details of the named intent classifier instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/intent_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - intent_classifiers
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_del
      description: Delete and return the details of the named intent classifier instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/intent_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers training samples
########
  /nlu/v2/intent_classifiers/{instance_name}/training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Add training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_add_training_samples
      description: Add training samples to named intent classifier. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - intent_classifiers
      summary: Update training samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_update_training_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of text samples to update. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - intent_classifiers
      summary: Get training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_get_training_samples
      description: Returns the training samples of the named intent classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - intent_classifiers
      summary: Delete training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_del_training_samples
      description: Delete the listed training samples of the named intent classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/intent_classifiers/{instance_name}/training_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - intent_classifiers
      summary: Delete all training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_del_training_samples_all
      description: Delete the listed training samples of the named intent classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers testing samples
########
  /nlu/v2/intent_classifiers/{instance_name}/testing_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Add testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_add_testing_samples
      description: Add testing samples to named intent classifier. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - intent_classifiers
      summary: Update testning samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_update_testing_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of text samples to update. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - intent_classifiers
      summary: Get testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_get_testing_samples
      description: Returns the testing samples of the named intent classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - intent_classifiers
      summary: Delete testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_del_testing_samples
      description: Delete the listed testing samples of the named intent classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/intent_classifiers/{instance_name}/testing_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - intent_classifiers
      summary: Delete all testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_del_testing_samples_all
      description: Delete all testing samples of the named intent classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers train
########
  /nlu/v2/intent_classifiers/{instance_name}/train:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Train the named intent classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_train
      description: Train the named intent classifier with the training and testing data already provided. Returns the updated instance details.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: train_details
        description: The arguments provided to the train operation.
        required: true
        schema:
          $ref: "#/definitions/train_details"
      responses:
        200:
          $ref: "#/responses/intent_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers model_params
########
  /nlu/v2/intent_classifiers/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Set the model parameters of named intent classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_set_params
      description: Set the model parameters of named intent classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/intent_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - intent_classifiers
      summary: Get the editable model parameters of named intent classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_get_params
      description: Get the editable model parameters of named intent classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers train online
########
  /nlu/v2/intent_classifiers/{instance_name}/online_training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Train/update the classifier online with the samples provided.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_online_training_samples
      description: Train/update the classifier online with the samples provided. This operation is more efficient than a full re-train. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers retrieve
########
  /nlu/v2/intent_classifiers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Classify intent.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_retrieve
      description: Classifies the intent and returns a probability sorted list of classes.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/scored_label_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers vaporise
########
  /nlu/v2/intent_classifiers/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/intent_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers get list of class labels
########
  /nlu/v2/intent_classifiers/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - intent_classifiers
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_get_labels
      description: Returns the classifier's list of possible class labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## intent_classifiers curation endpoint
########
  /nlu/v2/intent_classifiers/{instance_name}/curate:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Endpoint to aid in the curation of an instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_curate
      description: Returns the list of samples behind a cell of the confusion matrix of the training or testing samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: label_pair
        description: The true label, predicted label and matrix (train/test) to use.
        required: true
        schema:
          $ref: "#/definitions/class_label_pair"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


########
## intent_classifiers tsne endpoint
########
  /nlu/v2/intent_classifiers/{instance_name}/tsne:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - intent_classifiers
      summary: Endpoint to start a TSNE process.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_tsne_post
      description: Starts a TSNE process.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: tsne_settings
        description: The TSNE settings.
        required: true
        schema:
          $ref: "#/definitions/tsne_settings"
      responses:
        200:
          description: successful request
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - intent_classifiers
      summary: Get the latest results of TSNE.
      x-swagger-router-controller: rest_api.flask_server.controllers.intent_classifiers_controller
      operationId: intent_classifier_tsne_get
      description: Get the latest results of TSNE.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/tsne_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## FAQ matchers root
########
  /nlu/v2/faq_matchers:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Create an FAQ matcher.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_create
      description: Create a new faq matcher or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/faq_matcher_create_details"
      responses:
        200:
          $ref: "#/responses/faq_matcher_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - faq_matchers
      summary: Get list of FAQ matchers.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_get_details_all
      description: Returns the list of faq matchers.
      responses:
        200:
          $ref: "#/responses/faq_matcher_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers named instance
########
  /nlu/v2/faq_matchers/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - faq_matchers
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_get_details
      description: Get the details of the named FAQ matcher instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/faq_matcher_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - faq_matchers
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_del
      description: Delete and return the details of the named FAQ matcher instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/faq_matcher_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers training samples
########
  /nlu/v2/faq_matchers/{instance_name}/training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Add training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_add_training_samples
      description: Add training samples to named faq matcher. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - faq_matchers
      summary: Update training samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_update_training_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of text samples to update. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - faq_matchers
      summary: Get training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_get_training_samples
      description: Returns the training samples of the named faq matcher.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - faq_matchers
      summary: Delete training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_del_training_samples
      description: Delete the listed training samples of the named FAQ matcher. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/faq_matchers/{instance_name}/training_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - faq_matchers
      summary: Delete all training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_del_training_samples_all
      description: Delete all training samples of the named FAQ matcher. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers testing samples
########
  /nlu/v2/faq_matchers/{instance_name}/testing_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Add testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_add_testing_samples
      description: Add testing samples to named faq matcher. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - faq_matchers
      summary: Update testning samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_update_testing_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of text samples to update. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - faq_matchers
      summary: Get testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_get_testing_samples
      description: Returns the testing samples of the named faq matcher.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - faq_matchers
      summary: Delete testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_del_testing_samples
      description: Delete the listed testing samples of the named FAQ matcher. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/faq_matchers/{instance_name}/testing_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - faq_matchers
      summary: Delete all testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_del_testing_samples_all
      description: Delete all testing samples of the named FAQ matcher. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers train
########
  /nlu/v2/faq_matchers/{instance_name}/train:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Train the named FAQ matcher.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_train
      description: Train the named FAQ matcher with the training and testing data already provided. Returns the updated instance detail.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: train_details
        description: The arguments provided to the train operation.
        required: true
        schema:
          $ref: "#/definitions/train_details"
      responses:
        200:
          $ref: "#/responses/faq_matcher_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers model_params
########
  /nlu/v2/faq_matchers/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Set the model parameters of named FAQ matcher.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_set_params
      description: Set the model parameters of FAQ matcher.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/faq_matcher_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - faq_matchers
      summary: Get the editable model parameters of named FAQ matcher.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_get_params
      description: Get the editable model parameters of FAQ matcher.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers train online
########
  /nlu/v2/faq_matchers/{instance_name}/online_training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Train/update the classifier online with the samples provided.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_online_training_samples
      description: Train/update the classifier online with the samples provided. This operation is more efficient than a full re-train. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers retrieve
########
  /nlu/v2/faq_matchers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Match retrieve and FAQ.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_retrieve
      description: Matchers the FAQ and returns a probability sorted list of answer labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/scored_label_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers vaporise
########
  /nlu/v2/faq_matchers/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/faq_matcher_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers get list of class labels
########
  /nlu/v2/faq_matchers/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - faq_matchers
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_get_labels
      description: Returns the classifier's list of possible class labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers curation endpoint
########
  /nlu/v2/faq_matchers/{instance_name}/curate:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Endpoint to aid in the curation of an instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_curate
      description: Returns the list of samples behind a cell of the confusion matrix of the training or testing samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: label_pair
        description: The true label, predicted label and matrix (train/test) to use.
        required: true
        schema:
          $ref: "#/definitions/class_label_pair"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## faq_matchers tsne endpoint
########
  /nlu/v2/faq_matchers/{instance_name}/tsne:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - faq_matchers
      summary: Endpoint to start a TSNE process.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_tsne_post
      description: Starts a TSNE process.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: tsne_settings
        description: The TSNE settings.
        required: true
        schema:
          $ref: "#/definitions/tsne_settings"
      responses:
        200:
          description: successful request
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - faq_matchers
      summary: Get the latest results of TSNE.
      x-swagger-router-controller: rest_api.flask_server.controllers.faq_matchers_controller
      operationId: faq_matcher_tsne_get
      description: Get the latest results of TSNE.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/tsne_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## Extract a list of dates from the text input.
########
  /nlu/v2/date_parsers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - date_parsers
      summary: Extract dates.
      x-swagger-router-controller: rest_api.flask_server.controllers.date_parsers_controller
      operationId: date_parser_retrieve
      description: Parses one or more dates from text.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/date_entity_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## Detect the sentiment of the text input - Generic, always available, model.
########
  /nlu/v2/sentiment_detectors/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - sentiment_detectors
      summary: Detect sentiment.
      x-swagger-router-controller: rest_api.flask_server.controllers.sentiment_detectors_controller
      operationId: sentiment_detector_retrieve
      description: Detect the general sentiment in the input text.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/sentiment"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## Detect the emotion in the text input - Generic, always available, model.
########
  /nlu/v2/emotion_classifiers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - emotion_classifiers
      summary: Classify emotion.
      x-swagger-router-controller: rest_api.flask_server.controllers.emotion_classifiers_controller
      operationId: emotion_classifier_retrieve
      description: Classifies the emotion in the text and returns a probability sorted list of classes.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/scored_label_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## emotion_classifiers get list of class labels
########
  /nlu/v2/emotion_classifiers/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - emotion_classifiers
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.emotion_classifiers_controller
      operationId: emotion_classifier_get_labels
      description: Returns the classifier's list of possible class labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## crf_entity_extractors root
########
  /nlu/v2/crf_entity_extractors:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - crf_entity_extractors
      summary: Create a crf entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_create
      description: Create a new crf entity extractor or reload one from the trash.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/crf_entity_extractor_create_details"
      responses:
        200:
          $ref: "#/responses/crf_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - crf_entity_extractors
      summary: Get list of crf entity extractors.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_get_details_all
      description: Get the list of crf entity extractors.
      responses:
        200:
          $ref: "#/responses/crf_entity_extractor_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## crf_entity_extractors named instance
########
  /nlu/v2/crf_entity_extractors/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - crf_entity_extractors
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_get_details
      description: Get the details of the named crf entity extractor instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/crf_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - crf_entity_extractors
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_del
      description: Delete and get the details of the named crf entity extractor instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/crf_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## crf_entity_extractors training samples
########
  /nlu/v2/crf_entity_extractors/{instance_name}/training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - crf_entity_extractors
      summary: Add training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_add_training_samples
      description: Add training samples to named extractor. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: crf_sample_list
        description: List of crf samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/crf_sample"
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - crf_entity_extractors
      summary: Update training samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_update_training_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: crf_sample_list
        description: List of crf samples. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/crf_sample"
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - crf_entity_extractors
      summary: Get training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_get_training_samples
      description: Get the training samples of the named extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - crf_entity_extractors
      summary: Delete training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_del_training_samples
      description: Delete the listed training samples of the named extractor. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: crf_sample_list
        description: List of crf samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/crf_sample"
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/crf_entity_extractors/{instance_name}/training_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - crf_entity_extractors
      summary: Delete all training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_del_training_samples_all
      description: Delete all training samples of the named extractor. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  ########
  ## crf_entity_extractors testing samples
  ########
  /nlu/v2/crf_entity_extractors/{instance_name}/testing_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - crf_entity_extractors
      summary: Add testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_add_testing_samples
      description: Add testing samples to named extractor. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: crf_sample_list
        description: List of crf samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/crf_sample"
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - crf_entity_extractors
      summary: Update testing samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_update_testing_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: crf_sample_list
        description: List of crf samples. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/crf_sample"
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - crf_entity_extractors
      summary: Get testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_get_testing_samples
      description: Get the testing samples of the named extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - crf_entity_extractors
      summary: Delete testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_del_testing_samples
      description: Delete the listed testing samples of the named extractor. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: crf_sample_list
        description: List of crf samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/crf_sample"
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/crf_entity_extractors/{instance_name}/testing_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - crf_entity_extractors
      summary: Delete all testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_del_testing_samples_all
      description: Delete all testing samples of the named extractor. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/crf_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## crf_entity_extractors train
########
  /nlu/v2/crf_entity_extractors/{instance_name}/train:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - crf_entity_extractors
      summary: Train the named crf extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_train
      description: Train the named crf extractor with the training and testing data already provided. Returns the updated instance details.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: train_details
        description: The arguments provided to the train operation.
        required: true
        schema:
          $ref: "#/definitions/train_details"
      responses:
        200:
          $ref: "#/responses/crf_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## crf_entity_extractors model_params
########
  /nlu/v2/crf_entity_extractors/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - crf_entity_extractors
      summary: Set the model parameters of named crf entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_set_params
      description: Set the model parameters of named crf entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/crf_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - crf_entity_extractors
      summary: Get the editable model parameters of named crf entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_get_params
      description: Get the editable model parameters of named crf entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## crf_entity_extractors retrieve
########
  /nlu/v2/crf_entity_extractors/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - crf_entity_extractors
      summary: Predict which entities was mentioned.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_retrieve
      description: Predict which entities was mentioned.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/crf_entity_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## crf_entity_extractors vaporise
########
  /nlu/v2/crf_entity_extractors/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - crf_entity_extractors
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/crf_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## crf_entity_extractors get list of entity labels
########
  /nlu/v2/crf_entity_extractors/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - crf_entity_extractors
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.crf_entity_extractors_controller
      operationId: crf_entity_extractor_get_labels
      description: Returns the extractor's list of possible entity labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## synonym_entity_extractors root
########
  /nlu/v2/synonym_entity_extractors:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - synonym_entity_extractors
      summary: Create a synonym entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_create
      description: Create a new synonym entity extractor or reload one from the trash.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/synonym_entity_extractor_create_details"
      responses:
        200:
          $ref: "#/responses/synonym_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - synonym_entity_extractors
      summary: Get list of synonym entity extractors.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_get_details_all
      description: Get the list of synonym entity extractors.
      responses:
        200:
          $ref: "#/responses/synonym_entity_extractor_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## synonym_entity_extractors named instance
########
  /nlu/v2/synonym_entity_extractors/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - synonym_entity_extractors
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_get_details
      description: Get the details of the named synonym entity extractor instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/synonym_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - synonym_entity_extractors
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_del
      description: Delete and get the details of the named synonym entity extractor instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/synonym_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## synonym_entity_extractors training samples
########
  /nlu/v2/synonym_entity_extractors/{instance_name}/training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - synonym_entity_extractors
      summary: Add training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_add_training_samples
      description: Add training samples to named extractor. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: synonym_sample_list
        description: List of synonym samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/synonym_sample"
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - synonym_entity_extractors
      summary: Update training samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_update_training_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: synonym_sample_list
        description: List of synonym samples. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/synonym_sample"
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - synonym_entity_extractors
      summary: Get training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_get_training_samples
      description: Get the training samples of the named extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - synonym_entity_extractors
      summary: Delete training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_del_training_samples
      description: Delete the listed training samples of the named extractor. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: synonym_sample_list
        description: List of synonym samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/synonym_sample"
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/synonym_entity_extractors/{instance_name}/training_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - synonym_entity_extractors
      summary: Delete all training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_del_training_samples_all
      description: Delete all training samples of the named extractor. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  ########
  ## synonym_entity_extractors testing samples
  ########
  /nlu/v2/synonym_entity_extractors/{instance_name}/testing_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - synonym_entity_extractors
      summary: Add testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_add_testing_samples
      description: Add testing samples to named extractor. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: synonym_sample_list
        description: List of synonym samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/synonym_sample"
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - synonym_entity_extractors
      summary: Update testing samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_update_testing_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: synonym_sample_list
        description: List of synonym samples. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/synonym_sample"
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - synonym_entity_extractors
      summary: Get testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_get_testing_samples
      description: Get the testing samples of the named extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - synonym_entity_extractors
      summary: Delete testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_del_testing_samples
      description: Delete the listed testing samples of the named extractor. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: synonym_sample_list
        description: List of synonym samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/synonym_sample"
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/synonym_entity_extractors/{instance_name}/testing_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - synonym_entity_extractors
      summary: Delete all testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_del_testing_samples_all
      description: Delete all testing samples of the named extractor. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/synonym_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## synonym_entity_extractors train
########
  /nlu/v2/synonym_entity_extractors/{instance_name}/train:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - synonym_entity_extractors
      summary: Train the named synonym extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_train
      description: Train the named synonym extractor with the training and testing data already provided. Returns the updated instance details.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: train_details
        description: The arguments provided to the train operation.
        required: true
        schema:
          $ref: "#/definitions/train_details"
      responses:
        200:
          $ref: "#/responses/synonym_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## synonym_entity_extractors model_params
########
  /nlu/v2/synonym_entity_extractors/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - synonym_entity_extractors
      summary: Set the model parameters of named synonym entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_set_params
      description: Set the model parameters of named synonym entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/synonym_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - synonym_entity_extractors
      summary: Get the editable model parameters of named synonym entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_get_params
      description: Get the editable model parameters of named synonym entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## synonym_entity_extractors retrieve
########
  /nlu/v2/synonym_entity_extractors/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - synonym_entity_extractors
      summary: Predict which entities was mentioned.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_retrieve
      description: Predict which entities was mentioned.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/synonym_entity_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## synonym_entity_extractors vaporise
########
  /nlu/v2/synonym_entity_extractors/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - synonym_entity_extractors
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/synonym_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## synonym_entity_extractors get list of entity labels
########
  /nlu/v2/synonym_entity_extractors/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - synonym_entity_extractors
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.synonym_entity_extractors_controller
      operationId: synonym_entity_extractor_get_labels
      description: Returns the extractor's list of possible entity labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## regex_entity_extractors root
########
  /nlu/v2/regex_entity_extractors:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - regex_entity_extractors
      summary: Create a regular expression entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.regex_entity_extractors_controller
      operationId: regex_entity_extractor_create
      description: Create a new regular expression entity extractor or reload one from the trash.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/regex_entity_extractor_create_details"
      responses:
        200:
          $ref: "#/responses/regex_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - regex_entity_extractors
      summary: Get list of regular expression entity extractors.
      x-swagger-router-controller: rest_api.flask_server.controllers.regex_entity_extractors_controller
      operationId: regex_entity_extractor_get_details_all
      description: Get the list of regular expression entity extractors.
      responses:
        200:
          $ref: "#/responses/regex_entity_extractor_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## regex_entity_extractors named instance
########
  /nlu/v2/regex_entity_extractors/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - regex_entity_extractors
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.regex_entity_extractors_controller
      operationId: regex_entity_extractor_get_details
      description: Get the details of the named regular expression entity extractor instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/regex_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - regex_entity_extractors
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.regex_entity_extractors_controller
      operationId: regex_entity_extractor_del
      description: Delete and get the details of the named regular expression entity extractor instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/regex_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## regex_entity_extractors model_params
########
  /nlu/v2/regex_entity_extractors/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - regex_entity_extractors
      summary: Set the model parameters of named regex entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.regex_entity_extractors_controller
      operationId: regex_entity_extractor_set_params
      description: Set the model parameters of named regex entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/regex_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - regex_entity_extractors
      summary: Get the editable model parameters of named regex entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.regex_entity_extractors_controller
      operationId: regex_entity_extractor_get_params
      description: Get the editable model parameters of named regex entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## regex_entity_extractors retrieve
########
  /nlu/v2/regex_entity_extractors/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - regex_entity_extractors
      summary: Extract information based on the regular expression.
      x-swagger-router-controller: rest_api.flask_server.controllers.regex_entity_extractors_controller
      operationId: regex_entity_extractor_retrieve
      description: Extract the entities matching the regular expression.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/regex_entity_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## regex_entity_extractors vaporise
########
  /nlu/v2/regex_entity_extractors/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - regex_entity_extractors
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.regex_entity_extractors_controller
      operationId: regex_entity_extractor_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/regex_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## person_name_entity_extractors root
########
#  /nlu/v2/person_name_entity_extractors:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    post:
#      tags:
#      - person_name_entity_extractors
#      summary: Create a person_name entity extractor.
#      x-swagger-router-controller: rest_api.flask_server.controllers.person_name_entity_extractors_controller
#      operationId: person_name_entity_extractor_create
#      description: Create a new person_name entity extractor or reload one from the trash.
#      parameters:
#      - in: body
#        name: create_details
#        description: The details of the instance to create.
#        required: true
#        schema:
#          $ref: "#/definitions/person_name_entity_extractor_create_details"
#      responses:
#        200:
#          $ref: "#/responses/person_name_entity_extractor_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#    get:
#      tags:
#      - person_name_entity_extractors
#      summary: Get list of regular expression entity extractors.
#      x-swagger-router-controller: rest_api.flask_server.controllers.person_name_entity_extractors_controller
#      operationId: person_name_entity_extractor_get_details_all
#      description: Get the list of person_name entity extractors.
#      responses:
#        200:
#          $ref: "#/responses/person_name_entity_extractor_instance_detail_list"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#########
### person_name_entity_extractors named instance
#########
#  /nlu/v2/person_name_entity_extractors/{instance_name}:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    get:
#      tags:
#      - person_name_entity_extractors
#      summary: Get details of named instance.
#      x-swagger-router-controller: rest_api.flask_server.controllers.person_name_entity_extractors_controller
#      operationId: person_name_entity_extractor_get_details
#      description: Get the details of the named person_name entity extractor instance.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      responses:
#        200:
#          $ref: "#/responses/person_name_entity_extractor_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#    delete:
#      tags:
#      - person_name_entity_extractors
#      summary: Delete named instance.
#      x-swagger-router-controller: rest_api.flask_server.controllers.person_name_entity_extractors_controller
#      operationId: person_name_entity_extractor_del
#      description: Delete and return the details of the named person_name entity extractor instance. Deleted models can be reloaded from the trash with the create operation.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      responses:
#        200:
#          $ref: "#/responses/person_name_entity_extractor_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#########
### person_name_entity_extractors model_params
#########
#  /nlu/v2/person_name_entity_extractors/{instance_name}/params:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    post:
#      tags:
#      - person_name_entity_extractors
#      summary: Set the model parameters of named person name entity extractor.
#      x-swagger-router-controller: rest_api.flask_server.controllers.person_name_entity_extractors_controller
#      operationId: person_name_entity_extractor_set_params
#      description: Set the model parameters of named person name entity extractor.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      - in: body
#        name: model_params
#        description: The model parameters.
#        required: true
#        schema:
#          $ref: "#/definitions/model_params"
#      responses:
#        200:
#          $ref: "#/responses/person_name_entity_extractor_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#    get:
#      tags:
#      - person_name_entity_extractors
#      summary: Get the editable model parameters of named person name entity extractor.
#      x-swagger-router-controller: rest_api.flask_server.controllers.person_name_entity_extractors_controller
#      operationId: person_name_entity_extractor_get_params
#      description: Get the editable model parameters of named person name entity extractor.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      responses:
#        200:
#          $ref: "#/responses/model_params"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#########
### person_name_entity_extractors retrieve
#########
#  /nlu/v2/person_name_entity_extractors/{instance_name}/retrieve:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    post:
#      tags:
#      - person_name_entity_extractors
#      summary: Extract information based on the regular expression.
#      x-swagger-router-controller: rest_api.flask_server.controllers.person_name_entity_extractors_controller
#      operationId: person_name_entity_extractor_retrieve
#      description: Extract the entities parsed by person_name.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      - in: body
#        name: text_input
#        description: The input text.
#        required: true
#        schema:
#          $ref: "#/definitions/text_input"
#      responses:
#        200:
#          $ref: "#/responses/person_name_entity_list"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#########
### person_name_entity_extractors vaporise
#########
#  /nlu/v2/person_name_entity_extractors/{instance_name}/vaporise:
#    parameters:
#    - $ref: '#/parameters/caller'
#
#    post:
#      tags:
#      - person_name_entity_extractors
#      summary: Vaporise the named model.
#      x-swagger-router-controller: rest_api.flask_server.controllers.person_name_entity_extractors_controller
#      operationId: person_name_entity_extractor_vaporise
#      description: Permanently vaporises a model even if not trashed.
#      parameters:
#      - in: path
#        name: instance_name
#        description: The name of the instance.
#        required: true
#        type: string
#      responses:
#        200:
#          $ref: "#/responses/person_name_entity_extractor_instance_detail"
#        400:
#          description: bad request
#        401:
#          $ref: "#/responses/UnauthorizedError"
#
#
###################################
###################################
########
## duckling_entity_extractors root
########
  /nlu/v2/duckling_entity_extractors:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - duckling_entity_extractors
      summary: Create a duckling entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.duckling_entity_extractors_controller
      operationId: duckling_entity_extractor_create
      description: Create a new duckling entity extractor or reload one from the trash.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/duckling_entity_extractor_create_details"
      responses:
        200:
          $ref: "#/responses/duckling_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - duckling_entity_extractors
      summary: Get list of regular expression entity extractors.
      x-swagger-router-controller: rest_api.flask_server.controllers.duckling_entity_extractors_controller
      operationId: duckling_entity_extractor_get_details_all
      description: Get the list of duckling entity extractors.
      responses:
        200:
          $ref: "#/responses/duckling_entity_extractor_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## duckling_entity_extractors named instance
########
  /nlu/v2/duckling_entity_extractors/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - duckling_entity_extractors
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.duckling_entity_extractors_controller
      operationId: duckling_entity_extractor_get_details
      description: Get the details of the named duckling entity extractor instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/duckling_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - duckling_entity_extractors
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.duckling_entity_extractors_controller
      operationId: duckling_entity_extractor_del
      description: Delete and return the details of the named duckling entity extractor instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/duckling_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## duckling_entity_extractors model_params
########
  /nlu/v2/duckling_entity_extractors/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - duckling_entity_extractors
      summary: Set the model parameters of named duckling entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.duckling_entity_extractors_controller
      operationId: duckling_entity_extractor_set_params
      description: Set the model parameters of named duckling entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/duckling_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - duckling_entity_extractors
      summary: Get the editable model parameters of named duckling entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.duckling_entity_extractors_controller
      operationId: duckling_entity_extractor_get_params
      description: Get the editable model parameters of named duckling entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## duckling_entity_extractors retrieve
########
  /nlu/v2/duckling_entity_extractors/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - duckling_entity_extractors
      summary: Extract information based on the regular expression.
      x-swagger-router-controller: rest_api.flask_server.controllers.duckling_entity_extractors_controller
      operationId: duckling_entity_extractor_retrieve
      description: Extract the entities parsed by duckling.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/duckling_entity_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## duckling_entity_extractors vaporise
########
  /nlu/v2/duckling_entity_extractors/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - duckling_entity_extractors
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.duckling_entity_extractors_controller
      operationId: duckling_entity_extractor_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/duckling_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## sim_word_entity_extractors root
########
  /nlu/v2/sim_word_entity_extractors:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - sim_word_entity_extractors
      summary: Create a word similarity entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.sim_word_entity_extractors_controller
      operationId: sim_word_entity_extractor_create
      description: Create a new word similarity entity extractor or reload one from the trash.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/sim_word_entity_extractor_create_details"
      responses:
        200:
          $ref: "#/responses/sim_word_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - sim_word_entity_extractors
      summary: Get list of similarity entity extractors.
      x-swagger-router-controller: rest_api.flask_server.controllers.sim_word_entity_extractors_controller
      operationId: sim_word_entity_extractor_get_details_all
      description: Get the list of similarity entity extractors.
      responses:
        200:
          $ref: "#/responses/sim_word_entity_extractor_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## sim_word_entity_extractors named instance
########
  /nlu/v2/sim_word_entity_extractors/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - sim_word_entity_extractors
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.sim_word_entity_extractors_controller
      operationId: sim_word_entity_extractor_get_details
      description: Get the details of the named similarity entity extractor instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/sim_word_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - sim_word_entity_extractors
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.sim_word_entity_extractors_controller
      operationId: sim_word_entity_extractor_del
      description: Delete and return the details of the named similarity entity extractor instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/sim_word_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## sim_word_entity_extractors model_params
########
  /nlu/v2/sim_word_entity_extractors/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - sim_word_entity_extractors
      summary: Set the model parameters of named similarity entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.sim_word_entity_extractors_controller
      operationId: sim_word_entity_extractor_set_params
      description: Set the model parameters of named similarity entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/sim_word_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - sim_word_entity_extractors
      summary: Get the editable model parameters of named similarity entity extractor.
      x-swagger-router-controller: rest_api.flask_server.controllers.sim_word_entity_extractors_controller
      operationId: sim_word_entity_extractor_get_params
      description: Get the editable model parameters of named similarity entity extractor.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## sim_word_entity_extractors retrieve
########
  /nlu/v2/sim_word_entity_extractors/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - sim_word_entity_extractors
      summary: Extract information based on word similarity.
      x-swagger-router-controller: rest_api.flask_server.controllers.sim_word_entity_extractors_controller
      operationId: sim_word_entity_extractor_retrieve
      description: Extract the word entities that are similar to the list of words used to create this model instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/sim_word_entity_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## sim_word_entity_extractors vaporise
########
  /nlu/v2/sim_word_entity_extractors/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - sim_word_entity_extractors
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.sim_word_entity_extractors_controller
      operationId: sim_word_entity_extractor_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/sim_word_entity_extractor_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## lr4_language_recognisers retrieve
########
  /nlu/v2/lr4_language_recognisers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - lr4_language_recognisers
      summary: Recognise the language the text is written in.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: lr4_language_recogniser_retrieve
      description: Recognise the language the text is written in. Returns the list of scored language codes (ISO 639-3).
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/scored_label_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## language_recognisers root
########
  /nlu/v2/language_recognisers:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - language_recognisers
      summary: Create a text language detector.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_create
      description: Create  new language detector from the pre-trained model name provided. 'lid_za' is currently the only pre-trained model that is available, but it was trained on all 11 languages and is pretty accurate. Returns the detail of the new instance.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/language_recogniser_create_details"
      responses:
        200:
          $ref: "#/responses/language_recogniser_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - language_recognisers
      summary: Get list of text language detectors.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_get_details_all
      description: Get the list of text language detectors.
      responses:
        200:
          $ref: "#/responses/language_recogniser_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## language_recognisers named instance
########
  /nlu/v2/language_recognisers/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - language_recognisers
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_get_details
      description: Get the details of the named text language detector instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/language_recogniser_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - language_recognisers
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_del
      description: Delete and return the details of the named text language detector instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/language_recogniser_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## language_recognisers model_params
########
  /nlu/v2/language_recognisers/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - language_recognisers
      summary: Set the model parameters of named language recogniser.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_set_params
      description: Set the model parameters of named language recogniser.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/language_recogniser_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - language_recognisers
      summary: Get the editable model parameters of named language recogniser.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_get_params
      description: Get the editable model parameters of named language recogniser.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## language_recognisers retrieve
########
  /nlu/v2/language_recognisers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - language_recognisers
      summary: Recognise the language the text is written in.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_retrieve
      description: Recognise the language the text is written in. Returns the list of scored language codes (ISO 639-3).
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/scored_label_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## language_recognisers vaporise
########
  /nlu/v2/language_recognisers/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - language_recognisers
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/language_recogniser_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## language_recognisers get list of class labels
########
  /nlu/v2/language_recognisers/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - language_recognisers
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.language_recognisers_controller
      operationId: language_recogniser_get_labels
      description: Returns the classifier's list of possible class labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## data_objects root.
########
  /nlu/v2/data_objects:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - data_objects
      summary: Get list of names of data_objects.
      x-swagger-router-controller: rest_api.flask_server.controllers.data_objects_controller
      operationId: data_object_get_names_all
      description: Get the list of names of data_objects.
      responses:
        200:
          $ref: "#/responses/data_object_name_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - data_objects
      summary: Delete all data_objects. Returns list of names of data_objects deleted. Note that this is a convenience operation. The objects will still need to be vaporised one by one.
      x-swagger-router-controller: rest_api.flask_server.controllers.data_objects_controller
      operationId: data_object_del_all
      description: Delete all data_objects. Returns list of names of data_objects deleted.
      responses:
        200:
          $ref: "#/responses/data_object_name_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## data_objects Update/create a data_object - a data_object is a json object.
########
  /nlu/v2/data_objects/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - data_objects
      summary: Update/create a data_object.
      x-swagger-router-controller: rest_api.flask_server.controllers.data_objects_controller
      operationId: data_object_post
      description: Update/create a data_object.
      parameters:
      - in: path
        name: instance_name
        description: The name of the data_object.
        required: true
        type: string
      - in: body
        name: data
        description: The data_object.
        required: true
        schema:
          $ref: "#/definitions/data_object"
      responses:
        200:
          $ref: "#/responses/data_object"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - data_objects
      summary: Get a data_object.
      x-swagger-router-controller: rest_api.flask_server.controllers.data_objects_controller
      operationId: data_object_get_details
      description: Get a data_object.
      parameters:
      - in: path
        name: instance_name
        description: The name of the data_object.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/data_object"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - data_objects
      summary: Trash a data_object.
      x-swagger-router-controller: rest_api.flask_server.controllers.data_objects_controller
      operationId: data_object_del
      description: Trash a data_object.
      parameters:
      - in: path
        name: instance_name
        description: The name of the data_object.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/data_object"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## data_objects vaporise
########
  /nlu/v2/data_objects/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - data_objects
      summary: Vaporise the named data_object.
      x-swagger-router-controller: rest_api.flask_server.controllers.data_objects_controller
      operationId: data_object_vaporise
      description: Permanently vaporise the named data_object.
      parameters:
      - in: path
        name: instance_name
        description: The name of the data_object.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/data_object"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


########
## data_objects untrash
########
  /nlu/v2/data_objects/{instance_name}/untrash:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - data_objects
      summary: Untrash the named data_object.
      x-swagger-router-controller: rest_api.flask_server.controllers.data_objects_controller
      operationId: data_object_untrash
      description: Bring the named data_object back from the trash.
      parameters:
      - in: path
        name: instance_name
        description: The name of the data_object.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/data_object"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

###################################
###################################
########
## health root
########
  /nlu/v2/health:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - health
      summary: An endpoint to check if the service is alive and well.
      x-swagger-router-controller: rest_api.flask_server.controllers.health_controller
      operationId: health_get_status
      description: Check if the service is alive and well.
      responses:
        200:
          description: service is healthy
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

###################################
###################################
########
## api_keys root
########
  /nlu/v2/api_keys:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - api_keys
      summary: Create an API key.
      x-swagger-router-controller: rest_api.flask_server.controllers.api_keys_controller
      operationId: api_key_create
      description: Create a new API key. Admin rights are required to create an API key.
      parameters:
      - in: body
        name: create_details
        description: The details of the API key to create.
        required: true
        schema:
          $ref: "#/definitions/api_key_create_details"
      responses:
        200:
          $ref: "#/responses/api_key_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - api_keys
      summary: Get list of API keys. Admin rights are required to get the full list of API keys.
      x-swagger-router-controller: rest_api.flask_server.controllers.api_keys_controller
      operationId: api_key_get_details_all
      description: Get list of API keys.
      responses:
        200:
          $ref: "#/responses/api_key_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## api_keys Get/Update details of the API key.
########
  /nlu/v2/api_keys/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - api_keys
      summary: Get details of named API key.
      x-swagger-router-controller: rest_api.flask_server.controllers.api_keys_controller
      operationId: api_key_get_details
      description: Get the details of the named API key.
      parameters:
      - in: path
        name: instance_name
        description: The API key.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/api_key_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    post:
      tags:
      - api_keys
      summary: Update the details of named API key. Adds the key if not found. Admin rights are required to update details.
      x-swagger-router-controller: rest_api.flask_server.controllers.api_keys_controller
      operationId: api_key_update_details
      description: Update the details of the named API key. Adds the key if not found.
      parameters:
      - in: path
        name: instance_name
        description: The API key.
        required: true
        type: string
      - in: body
        name: create_details
        description: The details of the API key to create.
        required: true
        schema:
          $ref: "#/definitions/api_key_create_details"
      responses:
        200:
          $ref: "#/responses/api_key_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - api_keys
      summary: Delete named API key.
      x-swagger-router-controller: rest_api.flask_server.controllers.api_keys_controller
      operationId: api_key_del
      description: Delete and return the details of the named API key.
      parameters:
      - in: path
        name: instance_name
        description: The API key.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/api_key_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## image_classifiers root
########
  /vision/v2/image_classifiers:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Create an image classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_create
      description: Create a new image classifier or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/image_classifier_create_details"

      responses:
        200:
          $ref: "#/responses/image_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - image_classifiers
      summary: Get list of image classifiers.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_get_details_all
      description: Get the list of image classifiers.
      responses:
        200:
          $ref: "#/responses/image_classifier_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers named instance
########
  /vision/v2/image_classifiers/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - image_classifiers
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_get_details
      description: Get the details of the named image classifier instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/image_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - image_classifiers
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_del
      description: Delete and return the details of the named image classifier instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/image_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers training samples
########
  /vision/v2/image_classifiers/{instance_name}/training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Add training samples. Image format is 256x256 RGB; jpeg encoding at quality 50 is suggested.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_add_training_samples
      description: Add training samples to named image classifier. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of labelled image samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - image_classifiers
      summary: Update training samples by UUID. Image format is 256x256 RGB; jpeg encoding at quality 50 is suggested.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_update_training_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of labelled image samples. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - image_classifiers
      summary: Get training samples. Image format is 256x256 RGB.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_get_training_samples
      description: Get the training samples of the named image classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - image_classifiers
      summary: Delete training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_del_training_samples
      description: Delete the listed training samples of the named image classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of image samples to delete. A sample can be deleted using either its content & label or its uuid.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /vision/v2/image_classifiers/{instance_name}/training_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - image_classifiers
      summary: Delete all training samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_del_training_samples_all
      description: Delete all training samples of the named image classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers testing samples
########
  /vision/v2/image_classifiers/{instance_name}/testing_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Add testing samples. Image format is 256x256 RGB; jpeg encoding at quality 50 is suggested.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_add_testing_samples
      description: Add testing samples to named image classifier. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of labelled image samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - image_classifiers
      summary: Update testing samples by UUID. Image format is 256x256 RGB; jpeg encoding at quality 50 is suggested.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_update_testing_samples
      description: Update training samples of the named text classifier. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of labelled image samples. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - image_classifiers
      summary: Get testing samples. Image format is 256x256 RGB.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_get_testing_samples
      description: Get the testing samples of the named image classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - image_classifiers
      summary: Delete testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_del_testing_samples
      description: Delete the listed testing samples of the named image classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of image samples to delete. A sample can be deleted using either its content & label or its uuid.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /vision/v2/image_classifiers/{instance_name}/testing_samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - image_classifiers
      summary: Delete testing samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_del_testing_samples_all
      description: Delete all testing samples of the named image classifier. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers train
########
  /vision/v2/image_classifiers/{instance_name}/train:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Train the named image classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_train
      description: Train the named image classifier with the training and testing data already provided. Returns the details of the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: train_details
        description: The arguments provided to the train operation.
        required: true
        schema:
          $ref: "#/definitions/train_details"
      responses:
        200:
          $ref: "#/responses/image_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers model_params
########
  /vision/v2/image_classifiers/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Set the model parameters of named image classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_set_params
      description: Set the model parameters of named image classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/image_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - image_classifiers
      summary: Get the editable model parameters of named image classifier.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_get_params
      description: Get the editable model parameters of named image classifier.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers train online
########
  /vision/v2/image_classifiers/{instance_name}/online_training_samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Train/update the classifier online with the samples provided. Image format is 256x256 RGB; jpeg encoding at quality 50 is suggested.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_online_training_samples
      description: Train/update the classifier online with the samples provided. This operation is more efficient than a full re-train. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of labelled image samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers retrieve
########
  /vision/v2/image_classifiers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Classify image; Image format is 256x256 RGB; jpeg encoding at quality 50 is suggested.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_retrieve
      description: Classifies the image and returns a probability sorted list of classes.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: image_input
        description: The input image.
        required: true
        schema:
          $ref: "#/definitions/image_input"
      responses:
        200:
          $ref: "#/responses/scored_label_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers vaporise
########
  /vision/v2/image_classifiers/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/image_classifier_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers get list of class labels
########
  /vision/v2/image_classifiers/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - image_classifiers
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_get_labels
      description: Returns the classifier's list of possible class labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_classifiers curation endpoint
########
  /vision/v2/image_classifiers/{instance_name}/curate:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_classifiers
      summary: Endpoint to aid in the curation of an instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_classifiers_controller
      operationId: image_classifier_curate
      description: Returns the list of samples behind a cell of the confusion matrix of the training or testing samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: label_pair
        description: The true label, predicted label and matrix (train/test) to use.
        required: true
        schema:
          $ref: "#/definitions/class_label_pair"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## image_readers root
########
  /vision/v2/image_readers:
    parameters:
    - $ref: '#/parameters/caller'

########
## image_readers retrieve
########
  /vision/v2/image_readers/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_readers
      summary: Read text from the image.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_readers_controller
      operationId: image_reader_retrieve
      description: Read text from the image. Returns list of strings found.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: image_input
        description: The input image.
        required: true
        schema:
          $ref: "#/definitions/image_input"
      responses:
        200:
          $ref: "#/responses/document"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## text_datasets root
########
  /nlu/v2/text_datasets:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_datasets
      summary: Create a text dataset.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_create
      description: Create a new text dataset or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/text_dataset_create_details"

      responses:
        200:
          $ref: "#/responses/text_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_datasets
      summary: Get list of text datasets.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_get_details_all
      description: Get the list of text datasets.
      responses:
        200:
          $ref: "#/responses/text_dataset_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_datasets named instance
########
  /nlu/v2/text_datasets/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - text_datasets
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_get_details
      description: Get the details of the named text dataset instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - text_datasets
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_del
      description: Delete and return the details of the named text dataset instance. Deleted instances can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_datasets samples
########
  /nlu/v2/text_datasets/{instance_name}/samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_datasets
      summary: Add samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_add_samples
      description: Add samples to named text dataset. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - text_datasets
      summary: Update samples by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_update_samples
      description: Update samples of the named text dataset. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of text samples to update. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_datasets
      summary: Get samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_get_samples
      description: Get the samples of the named text dataset.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      - in: query
        name: sub_sample
        description: If provided, the size of the shuffled sub-sample to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - text_datasets
      summary: Delete samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_del_samples
      description: Delete the listed samples of the named text dataset. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_text_sample_list
        description: List of labelled text samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_text_sample"
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/text_datasets/{instance_name}/samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - text_datasets
      summary: Delete all samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_del_samples_all
      description: Delete all samples of the named text dataset. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_text_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


########
## text_datasets model_params
########
  /nlu/v2/text_datasets/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_datasets
      summary: Set the model parameters of named text dataset.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_set_params
      description: Set the model parameters of named text dataset.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/text_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_datasets
      summary: Get the editable model parameters of named text dataset.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_get_params
      description: Get the editable model parameters of named text dataset.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_datasets vaporise
########
  /nlu/v2/text_datasets/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_datasets
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_datasets get list of class labels
########
  /nlu/v2/text_datasets/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - text_datasets
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_datasets_controller
      operationId: text_dataset_get_labels
      description: Returns the dataset's list of possible class labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## image_datasets root
########
  /vision/v2/image_datasets:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_datasets
      summary: Create an image dataset.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_create
      description: Create a new image dataset or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/image_dataset_create_details"

      responses:
        200:
          $ref: "#/responses/image_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - image_datasets
      summary: Get list of image datasets.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_get_details_all
      description: Get the list of image datasets.
      responses:
        200:
          $ref: "#/responses/image_dataset_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_datasets named instance
########
  /vision/v2/image_datasets/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - image_datasets
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_get_details
      description: Get the details of the named image dataset instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/image_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - image_datasets
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_del
      description: Delete and return the details of the named image dataset instance. Deleted instances can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/image_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_datasets samples
########
  /vision/v2/image_datasets/{instance_name}/samples:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_datasets
      summary: Add samples. Image format is 256x256 RGB; jpeg encoding at quality 50 is suggested.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_add_samples
      description: Add samples to named image dataset. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of labelled image samples.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - image_datasets
      summary: Update samples by UUID. Image format is 256x256 RGB; jpeg encoding at quality 50 is suggested.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_update_samples
      description: Update samples of the named text dataset. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of labelled image samples. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - image_datasets
      summary: Get samples. Image format is 256x256 RGB.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_get_samples
      description: Get the samples of the named image dataset.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      - in: query
        name: sub_sample
        description: If provided, the size of the shuffled sub-sample to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - image_datasets
      summary: Delete samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_del_samples
      description: Delete the listed samples of the named image dataset. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: labelled_image_sample_list
        description: List of image samples to delete. A sample can be deleted using either its content & label or its uuid.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/labelled_image_sample"
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /vision/v2/image_datasets/{instance_name}/samples_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - image_datasets
      summary: Delete all samples.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_del_samples_all
      description: Delete all samples of the named image dataset. Returns the deleted samples.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labelled_image_sample_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


########
## image_datasets model_params
########
  /vision/v2/image_datasets/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_datasets
      summary: Set the model parameters of named image dataset.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_set_params
      description: Set the model parameters of named image dataset.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: model_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/model_params"
      responses:
        200:
          $ref: "#/responses/image_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - image_datasets
      summary: Get the editable model parameters of named image dataset.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_get_params
      description: Get the editable model parameters of named image dataset.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/model_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


########
## image_datasets vaporise
########
  /vision/v2/image_datasets/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - image_datasets
      summary: Vaporise the named model.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/image_dataset_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## image_datasets get list of class labels
########
  /vision/v2/image_datasets/{instance_name}/labels:
    parameters:
    - $ref: '#/parameters/caller'

    get:
      tags:
      - image_datasets
      summary: Get list of possible labels.
      x-swagger-router-controller: rest_api.flask_server.controllers.image_datasets_controller
      operationId: image_dataset_get_labels
      description: Returns the dataset's list of possible class labels.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/labels"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
###################################
########
## text_pipelines root
########
  /nlu/v2/text_pipelines:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_pipelines
      summary: Create a text pipeline.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_create
      description: Create a new text pipeline or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/text_pipeline_create_details"
      responses:
        200:
          $ref: "#/responses/text_pipeline_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_pipelines
      summary: Get list of text pipelines.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_get_details_all
      description: Get the list of text pipelines.
      responses:
        200:
          $ref: "#/responses/text_pipeline_instance_detail_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_pipelines named instance
########
  /nlu/v2/text_pipelines/{instance_name}:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_pipelines
      summary: Create a text pipeline.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_create_from_path
      description: Create a new text pipeline or reload one from the trash. Returns the details of the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: create_details
        description: The details of the instance to create.
        required: true
        schema:
          $ref: "#/definitions/text_pipeline_create_details"

      responses:
        200:
          $ref: "#/responses/text_pipeline_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_pipelines
      summary: Get details of named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_get_details
      description: Get the details of the named text pipeline instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_pipeline_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - text_pipelines
      summary: Delete named instance.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_del
      description: Delete and return the details of the named text pipeline instance. Deleted models can be reloaded from the trash with the create operation.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_pipeline_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_pipelines models
########
  /nlu/v2/text_pipelines/{instance_name}/models:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_pipelines
      summary: Add list of models.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_add_models
      description: Add models to named text pipeline. Returns the samples added to the instance.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: pipeline_model_list  # Can this be a define like below.
        description: List of models to add.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/pipeline_model"
      responses:
        200:
          $ref: "#/responses/pipeline_model_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    put:
      tags:
      - text_pipelines
      summary: Update pipeline models by UUID.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_update_models
      description: Update models of the named text pipeline. A sample's UUIDs is used to uniquely identify it. Returns the samples that were updated.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: pipeline_model_list
        description: List of pipeline models to update. A sample's UUIDs is used to uniquely identify it.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/pipeline_model"
      responses:
        200:
          $ref: "#/responses/pipeline_model_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_pipelines
      summary: Get list of models.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_get_models
      description: Get the models of the named text pipeline.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: query
        name: index
        description: The sample index to start from.
        required: false
        type: integer
      - in: query
        name: len
        description: The number of samples to return.
        required: false
        type: integer
      responses:
        200:
          $ref: "#/responses/pipeline_model_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    delete:
      tags:
      - text_pipelines
      summary: Delete list of models.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_del_models
      description: Delete the listed models of the named text pipeline. Returns the deleted names.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: pipeline_model_list
        description: List of pipeline models.
        required: true
        schema:
          type: array
          items:
            $ref: "#/definitions/pipeline_model"
      responses:
        200:
          $ref: "#/responses/pipeline_model_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

  /nlu/v2/text_pipelines/{instance_name}/models_all:
    parameters:
    - $ref: '#/parameters/caller'

    delete:
      tags:
      - text_pipelines
      summary: Delete all models from the pipeline.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_del_models_all
      description: Delete all models from the named pipeline. Returns the deleted models.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/pipeline_model_list"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_pipelines pipeline_params
########
  /nlu/v2/text_pipelines/{instance_name}/params:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_pipelines
      summary: Set the model parameters of named text pipeline.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_set_params
      description: Set the model parameters of named text pipeline.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: pipeline_params
        description: The model parameters.
        required: true
        schema:
          $ref: "#/definitions/pipeline_params"
      responses:
        200:
          $ref: "#/responses/text_pipeline_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

    get:
      tags:
      - text_pipelines
      summary: Get the editable model parameters of named text pipeline.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_get_params
      description: Get the editable model parameters of named text pipeline.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/pipeline_params"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_pipelines retrieve
########
  /nlu/v2/text_pipelines/{instance_name}/retrieve:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_pipelines
      summary: Run the text pipeline and return the results.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_retrieve
      description: Run the text pipeline and return the results.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      - in: body
        name: text_input
        description: The input text.
        required: true
        schema:
          $ref: "#/definitions/text_input"
      responses:
        200:
          $ref: "#/responses/text_pipeline_response"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"

########
## text_pipelines vaporise
########
  /nlu/v2/text_pipelines/{instance_name}/vaporise:
    parameters:
    - $ref: '#/parameters/caller'

    post:
      tags:
      - text_pipelines
      summary: Vaporise the named pipeline.
      x-swagger-router-controller: rest_api.flask_server.controllers.text_pipelines_controller
      operationId: text_pipeline_vaporise
      description: Permanently vaporises a model even if not trashed.
      parameters:
      - in: path
        name: instance_name
        description: The name of the instance.
        required: true
        type: string
      responses:
        200:
          $ref: "#/responses/text_pipeline_instance_detail"
        400:
          description: bad request
        401:
          $ref: "#/responses/UnauthorizedError"


###################################
# Descriptions of common parameters
###################################
parameters:
  caller:
    in: header
    name: X-CALLER
    type: string
    required: false


##################################
# Descriptions of common responses
##################################
responses:
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string

  dashboard_detail:
    description: Your dashboard content.
    schema:
      $ref: "#/definitions/dashboard_detail"

  service_params:
    description: The service params.
    schema:
      $ref: "#/definitions/service_params"

  model_params:
    description: The model parameters.
    schema:
      $ref: "#/definitions/model_params"

  image_classifier_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/image_classifier_instance_detail"

  image_classifier_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/image_classifier_instance_detail"

  image_dataset_instance_detail:
    description: The dataset instance detail
    schema:
      $ref: "#/definitions/image_dataset_instance_detail"

  image_dataset_instance_detail_list:
    description: A list of datasets' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/image_dataset_instance_detail"

  text_pipeline_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/text_pipeline_instance_detail"

  text_pipeline_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/text_pipeline_instance_detail"

  pipeline_model_list:
    description: A list of pipeline models.
    schema:
      type: array
      items:
        $ref: "#/definitions/pipeline_model"

  pipeline_params:
    description: The pipeline parameters.
    schema:
      $ref: "#/definitions/pipeline_params"

  text_classifier_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/text_classifier_instance_detail"

  text_classifier_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/text_classifier_instance_detail"

  text_dataset_instance_detail:
    description: The dataset instance detail
    schema:
      $ref: "#/definitions/text_dataset_instance_detail"

  text_dataset_instance_detail_list:
    description: A list of datasets' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/text_dataset_instance_detail"

  word_manifold_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/word_manifold_instance_detail"

  word_manifold_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/word_manifold_instance_detail"

  faq_matcher_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/faq_matcher_instance_detail"

  faq_matcher_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/faq_matcher_instance_detail"

  intent_classifier_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/intent_classifier_instance_detail"

  intent_classifier_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/intent_classifier_instance_detail"

  crf_entity_extractor_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/crf_entity_extractor_instance_detail"

  crf_entity_extractor_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/crf_entity_extractor_instance_detail"

  synonym_entity_extractor_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/synonym_entity_extractor_instance_detail"

  synonym_entity_extractor_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/synonym_entity_extractor_instance_detail"

  regex_entity_extractor_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/regex_entity_extractor_instance_detail"

  regex_entity_extractor_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/regex_entity_extractor_instance_detail"

  person_name_entity_extractor_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/person_name_entity_extractor_instance_detail"

  person_name_entity_extractor_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/person_name_entity_extractor_instance_detail"

  duckling_entity_extractor_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/duckling_entity_extractor_instance_detail"

  duckling_entity_extractor_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/duckling_entity_extractor_instance_detail"

  sim_word_entity_extractor_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/sim_word_entity_extractor_instance_detail"

  sim_word_entity_extractor_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/sim_word_entity_extractor_instance_detail"

  language_recogniser_instance_detail:
    description: The instance detail
    schema:
      $ref: "#/definitions/language_recogniser_instance_detail"

  language_recogniser_instance_detail_list:
    description: A list of models' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/language_recogniser_instance_detail"

  api_key_instance_detail:
    description: The api key instance detail
    schema:
      $ref: "#/definitions/api_key_instance_detail"

  api_key_instance_detail_list:
    description: A list of API keys' instance details
    schema:
      type: array
      items:
        $ref: "#/definitions/api_key_instance_detail"

  crf_sample_list:
    description: List of crf samples.
    schema:
      type: array
      items:
        $ref: "#/definitions/crf_sample"

  synonym_sample_list:
    description: List of synonym samples.
    schema:
      type: array
      items:
        $ref: "#/definitions/synonym_sample"

  labelled_image_sample_list:
    description: The list of labelled image samples.
    schema:
      type: array
      items:
        $ref: "#/definitions/labelled_image_sample"

  text_pipeline_response:
      description: The text pipeline response on a retrieve operation which is a dict of model responses.
      schema:
        $ref: "#/definitions/text_pipeline_response"

  labelled_text_sample_list:
    description: The list of labelled text samples.
    schema:
      type: array
      items:
        $ref: "#/definitions/labelled_text_sample"

  tsne_sample_list:
    description: The list of tsne samples.
    schema:
      type: array
      items:
        $ref: "#/definitions/tsne_sample"

  word_and_distance_list:
    description: A list of words with distances.
    schema:
      type: array
      items:
        $ref: "#/definitions/word_and_distance"

  data_object:
    description: The data_object.
    schema:
      $ref: "#/definitions/data_object"

  data_object_list:
    description: The data_object.
    schema:
      type: array
      items:
        $ref: "#/definitions/data_object"

  data_object_name_list:
    description: A list of data_objects.
    schema:
      type: array
      items:
        $ref: "#/definitions/data_object_name"

  scored_label_list:
    description: The list of scored and sorted labels.
    schema:
      type: array
      items:
        $ref: "#/definitions/scored_label"

  labels:
    description: The list of possible labels.
    schema:
      type: array
      items:
        $ref: "#/definitions/class_label"

  crf_entity_list:
    description: The list of extracted crf entities.
    schema:
      type: array
      items:
        $ref: "#/definitions/crf_entity"

  synonym_entity_list:
    description: The list of extracted synonym entities.
    schema:
      type: array
      items:
        $ref: "#/definitions/synonym_entity"

  regex_entity_list:
    description: The list of extracted regex entities.
    schema:
      type: array
      items:
        $ref: "#/definitions/regex_entity"

  duckling_entity_list:
    description: The list of extracted duckling entities.
    schema:
      type: array
      items:
        $ref: "#/definitions/duckling_entity"

  person_name_entity_list:
    description: The list of extracted person name entities.
    schema:
      type: array
      items:
        $ref: "#/definitions/person_name_entity"

  sim_word_entity_list:
    description: The list of extracted similar word entities.
    schema:
      type: array
      items:
        $ref: "#/definitions/sim_word_entity"

  date_entity_list:
    description: The list of structured date entities.
    schema:
      type: array
      items:
        $ref: "#/definitions/date_entity"

  sentiment:
    description: The sentiment response.
    schema:
      $ref: "#/definitions/sentiment"

  document:
    description: A document.
    schema:
      type: array
      items:
        $ref: "#/definitions/paragraph"

####################################
# Descriptions of common definitions
####################################
definitions:
#  rate_limited_response_headers:
#    description: The instance detail.
#    headers:
#      X-RateLimit-Remaining:
#        schema:
#          type: integer
#        description: The number of requests left for the time window.

  crf_entity:
    description: A crf entity.
    type: object
    required:
    - entity
    - index
    - len
    properties:
      entity:
        type: string
        description: The entity label/class/type.
      value:
        type: string
        description: The value of the entity as extracted from the input text. Not used during training!
      index:
        type: integer
        description: The first character of the entity in the associated utterance.
      len:
        type: integer
        description: The length of the extracted entity in the associated utterance.
    example: {"entity": "location", "index": 31, "len": 8}

  crf_sample:
    description: A crf entity extractor training/testing utterance with labelled entities.
    type: object
    properties:
      text:
        type: string
      intent:
        type: string
      entity_list:
        description: A list of labelled entities.
        type: array
        items:
          $ref: "#/definitions/crf_entity"
      uuid:
        type: string
        example: 'e11c7557-98bb-4a19-a13a-e23f0bf51870'
        description: The uuid of the sample.

  synonym_entity:
    description: A synonym entity.
    type: object
    required:
    - entity
    properties:
      entity:
        type: string
        description: The entity label/class/type.
      ignore_word_boundaries:
        type: boolean
        description: If True then parts of input words will also be matched. Default is False to only match input words exactly. See 'ignore_case' flag to also control the case sensitivity of the match.
      ignore_case:
        type: boolean
        description: If True then the casing is ignored. The default is True i.e. to ignore case.
      syn_set:
        description: The list of synonyms associated with this entity label. One should either provide a synset OR an index and len of a specific synonym in the associated utterance.
        type: array
        items:
          type: string
      index:
        type: integer
        description: The first character of the entity in the associated utterance. One should either provide a synset OR an index and len of a specific synonym in the associated utterance.
      len:
        type: integer
        description: The length of the extracted entity in the associated utterance.
      value:
        type: string
        description: The value of the entity as extracted from the input text. Not used during training!
    example: {"entity": "error", "syn_set": ["fault", "error", "red light", "problem"]}

  synonym_sample:
    description: A synonym entity extractor training/testing utterance with labelled entities. One should either provide an entity list with synsets OR text with index+len of a specific synonym in the associated utterance.
    type: object
    properties:
      text:
        type: string
      intent:
        type: string
      entity_list:
        description: A list of labelled entities.
        type: array
        items:
          $ref: "#/definitions/synonym_entity"
      uuid:
        type: string
        example: 'e11c7557-98bb-4a19-a13a-e23f0bf51870'
        description: The uuid of the sample.

  model_revision:
    description: Summary of a model revision stored in the history.
    type: object
    required:
    - version
    - uuid
    - message
    properties:
      version:
        description: The revision ID, a non-consecutive increasing unique number.
        type: integer
        example: 10
      uuid:
        description: A universally unique ID used to reference this revision.
        type: string
        example: ea0e5aa3-1772-49aa-a805-db7ed6da46bf
      message:
        description: A longer existential description of this revision.
        type: string
        example: Added training data.

  dashboard_model_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - model_type
    - collection_uri
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: example_instance
      uuid:
        description: A universally unique ID used to reference this revision of the instance.
        type: string
        example: ea0e5aa3-1772-49aa-a805-db7ed6da46bf
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: This is an example of this type of model.
      model_type:
        description: The type of this model.
        type: string
        example: faq_matcher
      collection_uri:
        description: "The URI of the model type's collection resource e.g. /faq_matchers for the collection of faq_matcher models."
        type: string
        example: "/faq_matchers"
      has_labels:
        description: "Whether or not the model returns a list of scored labels. Unknown if flag not present."
        type: boolean
        example: True
      trashed:
        description: Whether or not this model has been deleted. Deleted models can be reloaded using the create opeeration.
        type: boolean
        example: False
      history:
        description: The model's history. The history includes the current version of the model only if the last update was pushed to the history.
        type: array
        items:
          $ref: "#/definitions/model_revision"

  dashboard_detail:
    description: Your dashboard content.
    type: object
    required:
    - api_version
    - service_name
    - model_list
    properties:
      api_version:
        description: The version of the http api.
        type: string
        example: 2.0.26
      service_name:
        description: The details of this service.
        type: string
        example: FeersumNLU playground.
      model_list:
        description: A list of models' instance details.
        type: array
        items:
          $ref: "#/definitions/dashboard_model_detail"
      log_file:
        type: string

  image_classifier_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      training_accuracy:
        description: The accuracy of the model as measured on the training set.
        type: number
        example: 1.0
      training_f1:
        description: The average F-score of the model as measured on the training set.
        type: number
        example: 1.0
      training_cm:
        description: The confusion matrix as measured on the training set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      testing_accuracy:
        description: The accuracy of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_f1:
        description: The average F-score of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_cm:
        description: The confusion matrix as measured on the testing set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      cm_labels:
        description: A dict that, if present, maps from the confusion matrix row and column labels to longer more descriptive labels. For example, if present it maps an FAQ answer ID to the string answer which may be either a label or the full text answer.
        type: object
      training_stamp:
        description: The time when the training operation concluded.
        type: string
        example: '2017-10-26 10:42:01.589979'
      num_training_samples:
        description: The model's number of training samples.
        type: integer
        example: 100
      num_testing_samples:
        description: The model's number of testing samples.
        type: integer
        example: 100
      clsfr_algorithm:
        description: The name of the algorithm that should be used for the classification.
        type: string
        example: "'resnet152', etc."
      threshold:
        description: There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.
        type: number
        example: 0.85
      temperature:
        description: The softmax temperature. The lower the temperature the more pronounced the winning class' probability will be. The default is 1.0. A lower temperature is useful in a many class problem when the probabilty might otherwise be diluted amongst the classes.
        type: number
        example: 1.0

  image_dataset_instance_detail:
    description: The dataset instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the dataset instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of dataset.'
      readonly:
        description: Indicates if the dataset is readonly and not editable.
        type: boolean
        example: False

  text_classifier_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      training_accuracy:
        description: The accuracy of the model as measured on the training set.
        type: number
        example: 1.0
      training_f1:
        description: The average F-score of the model as measured on the training set.
        type: number
        example: 1.0
      training_cm:
        description: The confusion matrix as measured on the training set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      testing_accuracy:
        description: The accuracy of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_f1:
        description: The average F-score of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_cm:
        description: The confusion matrix as measured on the testing set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      cm_labels:
        description: A dict that, if present, maps from the confusion matrix row and column labels to longer more descriptive labels. For example, if present it maps an FAQ answer ID to the string answer which may be either a label or the full text answer.
        type: object
      training_stamp:
        description: The time when the training operation concluded.
        type: string
        example: '2017-10-26 10:42:01.589979'
      num_training_samples:
        description: The model's number of training samples.
        type: integer
        example: 100
      num_testing_samples:
        description: The model's number of testing samples.
        type: integer
        example: 100
      clsfr_algorithm:
        description: The name of the algorithm that should be used for the classification.
        type: string
        example: "'svm', 'naive_bayes', 'nearest_neighbour_fuzzy', 'nearest_neighbour_l1', 'nearest_neighbour_cosine', 'nearest_neighbour_cosine', 'fully_connected_neural_net', etc."
      language_model_list:
        description: The list of labelled language models used as sentence encoders.
        type: array
        items:
          $ref: "#/definitions/labelled_language_model"
      threshold:
        description: There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.
        type: number
        example: 0.85
      temperature:
        description: The softmax temperature. The lower the temperature the more pronounced the winning class' probability will be. The default is 1.0. A lower temperature is useful in a many class problem when the probabilty might otherwise be diluted amongst the classes.
        type: number
        example: 1.0

  text_pipeline_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      model_list:
        description: The list of pipeline models.
        type: array
        items:
          $ref: "#/definitions/pipeline_model"

  text_dataset_instance_detail:
    description: The dataset instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the dataset instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of dataset.'
      readonly:
        description: Indicates if the dataset is readonly and not editable.
        type: boolean
        example: False

  word_manifold_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      word_vectors_file:
        description: The input file on the server (if any) to use.
        type: string
        example: 'glove_za_eng.txt'

  faq_matcher_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      training_accuracy:
        description: The accuracy of the model as measured on the training set.
        type: number
        example: 1.0
      training_f1:
        description: The average F-score of the model as measured on the training set.
        type: number
        example: 1.0
      training_cm:
        description: The confusion matrix as measured on the training set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      testing_accuracy:
        description: The accuracy of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_f1:
        description: The average F-score of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_cm:
        description: The confusion matrix as measured on the testing set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      cm_labels:
        description: A dict that, if present, maps from the confusion matrix row and column labels to longer more descriptive labels. For example, if present it maps an FAQ answer ID to the string answer which may be either a label or the full text answer.
        type: object
      training_stamp:
        description: The time when the training operation concluded.
        type: string
        example: '2017-10-26 10:42:01.589979'
      num_training_samples:
        description: The model's number of training samples.
        type: integer
        example: 100
      num_testing_samples:
        description: The model's number of testing samples.
        type: integer
        example: 100
      word_manifold_list:
        description: The list of labelled word manifolds used for training.
        type: array
        items:
          $ref: "#/definitions/labelled_word_manifold"
      threshold:
        description: There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.
        type: number
        example: 0.85
      temperature:
        description: The softmax temperature. The lower the temperature the more pronounced the winning class' probability will be. The default is 1.0. A lower temperature is useful in a many class problem when the probabilty might otherwise be diluted amongst the classes.
        type: number
        example: 1.0

  intent_classifier_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      training_accuracy:
        description: The accuracy of the model as measured on the training set.
        type: number
        example: 1.0
      training_f1:
        description: The average F-score of the model as measured on the training set.
        type: number
        example: 1.0
      training_cm:
        description: The confusion matrix as measured on the training set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      validation_accuracy:
        description: The accuracy of the model as measured by cross validation on the training set.
        type: number
        example: 1.0
      validation_f1:
        description: The average F-score of the model as measured by cross validation on the training set.
        type: number
        example: 1.0
      validation_cm:
        description: The confusion matrix as measured by cross validation on the training set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      testing_accuracy:
        description: The accuracy of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_f1:
        description: The average F-score of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_cm:
        description: The confusion matrix as measured on the testing set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.
        type: object
      cm_labels:
        description: A dict that, if present, maps from the confusion matrix row and column labels to longer more descriptive labels. For example, if present it maps an FAQ answer ID to the string answer which may be either a label or the full text answer.
        type: object
      training_stamp:
        description: The time when the training operation concluded.
        type: string
        example: '2017-10-26 10:42:01.589979'
      num_training_samples:
        description: The model's number of training samples.
        type: integer
        example: 100
      num_testing_samples:
        description: The model's number of testing samples.
        type: integer
        example: 100
      word_manifold_list:
        description: The list of labelled word manifolds used for training.
        type: array
        items:
          $ref: "#/definitions/labelled_word_manifold"
      threshold:
        description: There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.
        type: number
        example: 0.85
      temperature:
        description: The softmax temperature. The lower the temperature the more pronounced the winning class' probability will be. The default is 1.0. A lower temperature is useful in a many class problem when the probabilty might otherwise be diluted amongst the classes.
        type: number
        example: 1.0

  crf_entity_extractor_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      training_accuracy:
        description: The accuracy of the model as measured on the training set.
        type: number
        example: 1.0
      training_f1:
        description: The average F-score of the model as measured on the training set.
        type: number
        example: 1.0
      validation_accuracy:
        description: The accuracy of the model as measured by cross validation on the training set.
        type: number
        example: 1.0
      validation_f1:
        description: The average F-score of the model as measured by cross validation on the training set.
        type: number
        example: 1.0
      testing_accuracy:
        description: The accuracy of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_f1:
        description: The average F-score of the model as measured on the testing set.
        type: number
        example: 1.0
      training_stamp:
        description: The time when the training operation concluded.
        type: string
        example: '2017-10-26 10:42:01.589979'
      num_training_samples:
        description: The model's number of training samples.
        type: integer
        example: 100
      num_testing_samples:
        description: The model's number of testing samples.
        type: integer
        example: 100
      threshold:
        description: There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.
        type: number
        example: 0.85

  synonym_entity_extractor_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      training_accuracy:
        description: The accuracy of the model as measured on the training set.
        type: number
        example: 1.0
      training_f1:
        description: The average F-score of the model as measured on the training set.
        type: number
        example: 1.0
      validation_accuracy:
        description: The accuracy of the model as measured by cross validation on the training set.
        type: number
        example: 1.0
      validation_f1:
        description: The average F-score of the model as measured by cross validation on the training set.
        type: number
        example: 1.0
      testing_accuracy:
        description: The accuracy of the model as measured on the testing set.
        type: number
        example: 1.0
      testing_f1:
        description: The average F-score of the model as measured on the testing set.
        type: number
        example: 1.0
      training_stamp:
        description: The time when the training operation concluded.
        type: string
        example: '2017-10-26 10:42:01.589979'
      num_training_samples:
        description: The model's number of training samples.
        type: integer
        example: 100
      num_testing_samples:
        description: The model's number of testing samples.
        type: integer
        example: 100
      threshold:
        description: There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.
        type: number
        example: 0.85

  regex_entity_extractor_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    - regex
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      regex:
        description: The regular expression i.e. '(?P<license>([A-Z]{3}[ ]?[0-9]{3}[ ]?(GP|NW|MP|EC|L|NC|NW)))'
        type: string
        example: '(?P<license>([A-Z]{3}[ ]?[0-9]{3}[ ]?(GP|NW|MP|EC|L|NC|NW)))'

  person_name_entity_extractor_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False

  duckling_entity_extractor_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      reference_time:
        description: The reference time of the date parser. Uses international standard date notation 'YYYY-MM-DD hh:mm+hh:mm' e.g. '2017-12-01', '2017-12-01 10:00' (server local zone), '2017-12-01 10:00+02:00'
        type: string
        example: '2017-12-10'

  sim_word_entity_extractor_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    - similar_words
    - threshold
    - word_manifold
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      similar_words:
        description: The list of similar words to test against.
        type: array
        items:
          type: string
          example: 'cat'
      threshold:
        description: The threshold below which words are not similar.
        type: number
        example: 0.65
      word_manifold:
        description: The word manifold used to measure word similarity.
        type: string
        example: 'feers_wm_eng'

  language_recogniser_instance_detail:
    description: The instance detail.
    type: object
    required:
    - name
    - id
    - lid_model_file
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      id:
        description: The unique id of a specific version of the instance.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      readonly:
        description: Indicates if the model is readonly and not editable.
        type: boolean
        example: False
      lid_model_file:
        description: The pre-trained model this instance was created from.
        type: string
        example: 'lid_za'

  api_key_instance_detail:
    description: The api key instance detail.
    type: object
    required:
    - api_key
    - desc
    - call_count
    properties:
      api_key:
        description: The API key.
        type: string
        example: '7986d2ef-0b98-4c91-b847-7b66110e2f61'
      desc:
        description: Details of the purpose or owner of this key.
        type: string
        example: 'Internal development key. Owner is name@company.io.'
      call_count:
        description: The total number of calls made with this API key.
        type: integer
        example: 1000000
      call_count_breakdown:
        description: The call count breakdown over the API endpoints by operation and model type.
        type: object
        example: {"operation": "retrieve", "call_count": 1034, "by_model_type": {"faq_matcher": 1034}}
      call_count_limit:
        description: The number of calls loaded on this key. 'None' or no value implies unlimited.
        type: integer
        example: 5000

  dashboard_params:
    description: The params used in generating the dashboard response.
    type: object
    properties:
      show_data_objects:
        description: Set this to True to include the data objects on the dashboard. Default is False.
        type: boolean
        example: False
      history_size:
        description: The max size of the revision history to include for a model.
        type: integer
        default: 10
        example: 10

  service_params:
    description: Config params for the service.
    type: object
    properties:
      cba:
        type: boolean
      dba:
        type: boolean

  image_classifier_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  image_dataset_create_details:
    description: The details of the dataset instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      load_from_store:
        description: Indicates if a pre-existing dataset with the specified name should be reloaded from the trash. Usually set to False in which case a new dataset is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  text_pipeline_create_details:
    description: The details of the instance to create.
    type: object
    # required:
    # - name
    # - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  text_classifier_create_details:
    description: The details of the instance to create.
    type: object
    # required:
    # - name
    # - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  text_dataset_create_details:
    description: The details of the dataset instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      load_from_store:
        description: Indicates if a pre-existing dataset with the specified name should be reloaded from the trash. Usually set to False in which case a new dataset is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the dataset to try and load from the dataset history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  faq_matcher_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      lid_model_file:
        description: The pre-trained LID model to load.
        type: string
        example: 'lid_za'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  intent_classifier_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      lid_model_file:
        description: The pre-trained LID model to load.
        type: string
        example: 'lid_za'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  word_manifold_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      word_vectors_file:
        description: The input file on the server (if any) to use.
        type: string
        example: 'glove_za_eng.txt'
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  crf_entity_extractor_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance to create.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example model of this type.'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  synonym_entity_extractor_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance to create.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example model of this type.'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  regex_entity_extractor_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance to create.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example model of this type.'
      regex:
        description: The regular expression.
        type: string
        example: '(?P<license>([A-Z]{3}[ ]?[0-9]{3}[ ]?(GP|NW|MP|EC|L|NC|NW)))'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  person_name_entity_extractor_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance to create.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of model.'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  duckling_entity_extractor_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance to create.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'This is an example of this type of model.'
      reference_time:
        description: The reference time of the date parser. Uses international standard date notation 'YYYY-MM-DD hh:mm+hh:mm' e.g. '2017-12-01', '2017-12-01 10:00' (server local zone), '2017-12-01 10:00+02:00'
        type: string
        default: ''
        example: '2017-12-10'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  sim_word_entity_extractor_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance to create.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model'
      similar_words:
        type: array
        items:
          type: string
          example: 'cat'
      threshold:
        description: The threshold below which words are not similar.
        type: number
        example: 0.65
      word_manifold:
        type: string
        example: 'feers_wm_eng'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  language_recogniser_create_details:
    description: The details of the instance to create.
    type: object
    required:
    - name
    - load_from_store
    properties:
      name:
        description: The sluggy-url-friendly-name of the instance to create.
        type: string
        example: 'example_instance'
      long_name:
        description: The human-friendly-name of the instance.
        type: string
        example: The example instance.
      desc:
        description: The longer existential description of this instance's purpose in life.
        type: string
        example: 'An example of this type of model.'
      lid_model_file:
        description: The pre-trained LID model to load.
        type: string
        example: 'lid_za'
      load_from_store:
        description: Indicates if a pre-existing model with the specified name should be reloaded from the trash. Usually set to False in which case a new model is created with details as specified.
        type: boolean
        example: False
      revision_uuid:
        description: If provided, the uuid of the revision of the instance to try and load from the history.
        type: string
        example: 'ea0e5aa3-1772-49aa-a805-db7ed6da46bf'

  labelled_image_sample:
    description: Labelled image sample.
    type: object
    properties:
      image:
        type: string
        format: byte  # base64-encoded file contents
      label:
        type: string
        example: 'unicorn'
      comment:
        description: A string note about the sample.
        type: string
        example: "Second sighting of a unicorn, but still looks a lot like a horse with a horn glued on."
      uuid:
        type: string
        example: 'e11c7557-98bb-4a19-a13a-e23f0bf51870'
        description: The uuid of the sample.

  text_pipeline_response:
    description: The text pipeline response on a retrieve operation which is a dict of model responses.
    type: object
#    required:
#      - body
#    properties:
#      body:
#        type: string
#        example: "5 January 2017 at 15:00"
#        description: The input text associated with the entity.

  pipeline_model:
    description: Model name and type. The model should already be created, trained, etc.
    type: object
    properties:
      name:
        type: string
        example: 'my_model'
      type:
        type: string
        example: 'text_classifier'
      uuid:
        type: string
        example: 'e11c7557-98bb-4a19-a13a-e23f0bf51870'
        description: The uuid of this reference. Not the uuid of the model being referred to.

  labelled_text_sample:
    description: Labelled text sample.
    type: object
    properties:
      text:
        type: string
        example: 'Hello, my name is Tom.'
      label:
        type: string
        example: 'greeting'
      lang_code:
        description: A 3 character ISO 639-3 language code - eng, afr, nbl, xho, zul, ssw, nso, sot, tsn, ven, tso.
        type: string
        example: 'eng'
      comment:
        description: A string note such as the exact answer text from a helpdesk or any other important facts about the text.
        type: string
        example: "Greeting with speaker's name."
      uuid:
        type: string
        example: 'e11c7557-98bb-4a19-a13a-e23f0bf51870'
        description: The uuid of the sample.

  tsne_sample:
    description: A TSNE data sample.
    type: object
    required:
      - text
      - label
      - x
      - y
    properties:
      text:
        type: string
        example: 'Hello, my name is Tom.'
      label:
        type: string
        example: 'greeting'
      x:
        type: number
        example: 1.5
      y:
        type: number
        example: 1.5
      z:
        type: number
        example: 1.5

  labelled_word_manifold:
    description: A labelled (e.g. lang_code labelled) word manifold instance.
    type: object
    required:
    - label
    - word_manifold
    properties:
      label:
        description: The language code label. Please use ISO 639-3 language codes.
        type: string
        example: 'eng'
      word_manifold:
        description: The name of the word manifold to use for the language code.
        type: string
        example: 'feers_wm_eng'

  labelled_language_model:
    description: A labelled (e.g. lang_code labelled) language instance.
    type: object
    required:
    - lang_code
    - lang_model
    properties:
      lang_code:
        description: The language code label. Please use ISO 639-3 language codes.
        type: string
        example: 'eng'
      lang_model:
        description: The name of the language model to use for the language code in the associated model.
        type: string
        example: 'feers_usent_eng'

  train_details:
    description: The parameters provided to the train operation.
    type: object
    properties:
      threshold:
        description: There is typically some model dependent threshold to be set upon training which is possibly mutable post training. This is that threshold.
        type: number
        example: 0.85
      temperature:
        description: The softmax temperature. The lower the temperature the more pronounced the winning class' probability will be. The default is 1.0. A lower temperature is useful in a many class problem when the probabilty might otherwise be diluted amongst the classes.
        type: number
        example: 1.0
      immediate_mode:
        description: Set immediate_mode to True to do synchronous/blocking training. Might be forced to False in production.
        type: boolean
        example: False
      word_manifold:
        description: |
          The word manifold instance to use for training and later inference.

          Rather use the word_manifold_list for supplying a language labelled list of word manifold instances to use in a multi-language system.
        type: string
        example: 'feers_wm_eng'
      word_manifold_list:
        description: The list of labelled word manifolds to use for training.
        type: array
        items:
          $ref: "#/definitions/labelled_word_manifold"
      clsfr_algorithm:
        description: The name of the algorithm that should be used for the classification.
        type: string
        example: "'nearest_neighbour_l1', 'nearest_neighbour_cosine', 'naive_bayes', etc."
      num_epochs:
        description: The number of epochs to train the model for.
        type: integer
        default: 30
      # ToDo: Add a vision model to be used for the image classifiers that make use of an encoder + classifier.
      language_model_list:
        description: The list of labelled language models used as sentence encoders.
        type: array
        items:
          $ref: "#/definitions/labelled_language_model"

  pipeline_params:
    description: The model parameters. Dict of parameters like name, long_name, desc, threshold, etc. Models can surface more paramerters. Use the params end-point to get the set of params that is editable.
    type: object
    properties:
      long_name:
        type: string
      desc:
        type: string
      readonly:
        type: boolean

  model_params:
    description: The model parameters. Dict of parameters like name, long_name, desc, threshold, etc. Models can surface more paramerters. Use the params end-point to get the set of params that is editable.
    type: object
    properties:
      long_name:
        type: string
      desc:
        type: string
      readonly:
        type: boolean
      threshold:
        type: number
      reference_time:
        type: string
      regex:
        type: string
      similar_words:
        type: array
        items:
          type: string
      word_manifold:
        type: string
      lid_model_file:
        type: string
      temperature:
        description: The softmax temperature. The lower the temperature the more pronounced the winning class' probability will be. The default is 1.0. A lower temperature is useful in a many class problem when the probabilty might otherwise be diluted amongst the classes.
        type: number
        example: 1.0

  image_input:
    description: The image input to be classified or processed. Can be provided as a base64 encoded string or alternatively as a URL to a an image.
    type: object
    properties:
      image:
        description: The base64 image input to be classified or processed.
        type: string
        format: byte  # base64-encoded file contents
      url:
        description: The URL to the image.
        type: string

  # Input text.
  text_input:
    description: The text input to be classified, matched or parsed.
    type: object
    required:
    - text
    properties:
      text:
        description: The text input to be classified, matched or parsed.
        type: string
        example: 'Hi, you may call me Tom.'
      lang_code:
        description: An optional ISO 639-3 language code hint - eng, afr, nbl, xho, zul, ssw, nso, sot, tsn, ven, tso.
        type: string
        example: 'eng'
      user_id:
        description: The user ID.
        type: string
        example: 'user_12345'
      session_id:
        description: The session or conversation ID.
        type: string
        example: 'conv_678'

  paragraph:
    description: A paragraph.
    type: object
    required:
    - text
    properties:
      text:
        description: The extracted text.
        type: string
        example: 'Hi, you may call me Tom too.'
      lang_code:
        description: The ISO 639-3 language code of the text. Included if available.
        type: string
        example: 'eng'

  tsne_settings:
    description: The TSNE settings.
    type: object
    required:
    - n_components
    properties:
      n_components:
        description: Dimension of the embedded space.
        type: integer
        example: 2
      perplexity:
        description: The perplexity is related to the number of nearest neighbors that is used in other manifold learning algorithms. Larger datasets usually require a larger perplexity. Consider selecting a value between 5 and 50. The choice is not extremely critical since t-SNE is quite insensitive to this parameter.
        type: number
        example: 30.0
        default: 30.0
      learning_rate:
        description: The learning rate for t-SNE is usually in the range [10.0, 1000.0]. If the learning rate is too high, the data may look like a ‘ball’ with any point approximately equidistant from its nearest neighbours. If the learning rate is too low, most points may look compressed in a dense cloud with few outliers. If the cost function gets stuck in a bad local minimum increasing the learning rate may help.
        type: number
        example: 200.0
        default: 200.0

  word_and_threshold:
    description: A word and a threshold.
    type: object
    required:
    - word
    - threshold
    properties:
      word:
        type: string
        example: 'cat'
      threshold:
        type: number
        example: 0.75

  word_and_distance:
    description: A word and a distance.
    type: object
    required:
    - word
    - distance
    properties:
      word:
        type: string
        example: 'cat'
      distance:
        type: number
        example: 0.75

  data_object:
    description: The data_object data.
    type: object

  data_object_name:
    description: The name of a data_object.
    type: string

  scored_label:
    description: A class label with an associated probablity.
    type: object
    required:
    - label
    - probability
    properties:
      label:
        type: string
        example: 'greeting'
      probability:
        type: number
        example: 0.95

  class_label:
    description: A class label.
    type: string
    example: 'greeting'

  class_label_pair:
    description: The ground truth label, predicted label and matrix (train/test) to use.
    type: object
    required:
      - true_label
      - predicted_label
      - matrix_name
    properties:
      true_label:
        type: string
        example: 'greeting'
      predicted_label:
        type: string
        example: 'question'
      matrix_name:
        description: The confusion matrix to use. Should be either 'train' or 'test' which refers to the confusion matrix of the training data or the testing data respectively.
        type: string
        example: 'train'

  new_word:
    description: A new word similar to an existing word.
    type: object
    required:
    - new_word
    - similar_to
    properties:
      new_word:
        type: string
        example: 'officewear'
      similar_to:
        type: string
        example: 'workwear'

  regex_entity:
    description: The extracted, possibly named, match from a regex entity extractor. The match for each named pattern is given as well as an _all_groups match.
    type: object
    example: {"ID": "1234567890123", "_all_groups": "1234567890123"}

  duckling_entity:
    description: A date, duration, interval, etc. entity from the Duckling entity extractor.
    type: object
    required:
    - body
    - dim
    properties:
      body:
        type: string
        example: "5 January 2017 at 15:00"
        description: The input text associated with the entity.
      dim:
        type: string
        example: "time"
        description: The dimension (time, duration, distance, etc.) of the entity.
      type:
        type: string
        example: "value"
        description: The type (value, interval, etc.) of this entity.
      value:
        type: string
        example: "2017-01-05T15:00"
        description: Structured result value.
      from_value:
        type: string
        example: "2017-01-05T15:00"
        description: Structured result value for an interval.
      to_value:
        type: string
        example: "2017-01-05T15:00"
        description: Structured result value for an interval.
      grain:
        type: string
        example: "day"
        description: The granularity/specificity of a time value.
      from_grain:
        type: string
        example: "day"
        description: The granularity/specificity of a time value for an interval.
      to_grain:
        type: string
        example: "day"
        description: The granularity/specificity of a time value for an interval.
      unit:
        type: string
        example: "week"
        description: The units of the value property.

  person_name_entity:
    description: A person name extracted by the person name entity extractor.
    type: object
    example: ["Tom"]

  sim_word_entity:
    description: A word with a similarity score extracted by a similar word entity extractor.
    type: object
    required:
    - entity
    - similarity
    properties:
      entity:
        description: The extracted word.
        type: string
        example: "orange"
      similarity:
        description: The cosine similarity between the extracted word and the closest example word.
        type: number
        example: 0.691

  date_entity:
    description: A structured date-time string with a best guess on the specificity/granularity (i.e. hour, day, month)
    type: object
    required:
    - value
    - granularity
    properties:
      value:
        type: string
        example: '1981-06-01T00:00:00.000+02:00'
      granularity:
        type: string
        enum: [second, minute, hour, day, week, month, year]
        example: month

  sentiment_detail:
    description: A sentiment value for text from index with length len. Value may range from -1.0 (very unhappy) to 1.0 (very happy).
    type: object
    required:
    - value
    - index
    - len
    properties:
      value:
        type: number
        example: 0.54
      index:
        type: number
        example: 0
      len:
        type: number
        example: 20

  sentiment:
    description: A sentiment value that may range from -1.0 (very unhappy) to 1.0 (very happy).
    type: object
    required:
    - value
    properties:
      value:
        type: number
        example: 0.54
      detail_list:
        description: A list with detailed sentiments on parts of the text..
        type: array
        items:
          $ref: "#/definitions/sentiment_detail"

  api_key_create_details:
    description: The details of the api key to create.
    type: object
    properties:
      desc:
        description: Details of the purpose or owner of this key.
        type: string
        example: 'Internal development key. Owner is name@company.io.'
      call_count_limit:
        description: The number of calls loaded on this key. 'None' or no value implies unlimited.
        type: integer
        example: 5000
